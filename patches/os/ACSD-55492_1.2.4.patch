diff --git a/vendor/magento/module-inventory-bundle-import-export/etc/di.xml b/vendor/magento/module-inventory-bundle-import-export/etc/di.xml
index 2e96e75240c..b35e3e61025 100644
--- a/vendor/magento/module-inventory-bundle-import-export/etc/di.xml
+++ b/vendor/magento/module-inventory-bundle-import-export/etc/di.xml
@@ -11,8 +11,5 @@
     </type>
     <type name="Magento\CatalogImportExport\Model\StockItemImporterInterface">
         <plugin name="update_bundle_products_stock_item_status" disabled="true"/>
-        <plugin name="update_bundle_products_stock_item_status_single_source_only"
-                type="Magento\InventoryBundleImportExport\Plugin\Import\Product\UpdateBundleProductsStockItemStatusPlugin"
-                sortOrder="200"/>
     </type>
 </config>
diff --git a/vendor/magento/module-inventory-bundle-product/Model/StockStatusProcessor.php b/vendor/magento/module-inventory-bundle-product/Model/StockStatusProcessor.php
new file mode 100644
index 00000000000..ea4b5154622
--- /dev/null
+++ b/vendor/magento/module-inventory-bundle-product/Model/StockStatusProcessor.php
@@ -0,0 +1,39 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryBundleProduct\Model;
+
+use Magento\Bundle\Model\Inventory\ChangeParentStockStatus;
+use Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorInterface;
+
+/**
+ * @inheritDoc
+ */
+class StockStatusProcessor implements CompositeProductStockStatusProcessorInterface
+{
+    /**
+     * @var ChangeParentStockStatus
+     */
+    private ChangeParentStockStatus $changeParentStockStatus;
+
+    /**
+     * @param ChangeParentStockStatus $changeParentStockStatus
+     */
+    public function __construct(
+        ChangeParentStockStatus $changeParentStockStatus
+    ) {
+        $this->changeParentStockStatus = $changeParentStockStatus;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function execute(array $productIds): void
+    {
+        $this->changeParentStockStatus->execute($productIds);
+    }
+}
diff --git a/vendor/magento/module-inventory-bundle-product/etc/di.xml b/vendor/magento/module-inventory-bundle-product/etc/di.xml
index 622c345aecd..e06bb96c292 100644
--- a/vendor/magento/module-inventory-bundle-product/etc/di.xml
+++ b/vendor/magento/module-inventory-bundle-product/etc/di.xml
@@ -29,4 +29,11 @@
     <type name="Magento\CatalogInventory\Helper\Stock">
         <plugin name="adapt_assign_stock_status_to_bundle_product" type="Magento\InventoryBundleProduct\Plugin\CatalogInventory\Helper\Stock\AdaptAssignStatusToProductPlugin"/>
     </type>
+    <type name="Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorPool">
+        <arguments>
+            <argument name="compositeProductStockStatusProcessors" xsi:type="array">
+                <item name="bundle" xsi:type="object">Magento\InventoryBundleProduct\Model\StockStatusProcessor</item>
+            </argument>
+        </arguments>
+    </type>
 </config>
diff --git a/vendor/magento/module-inventory-catalog/Plugin/CatalogInventory/Observer/ParentItemProcessor/SkipParentItemProcessorOnMultipleSourceMode.php b/vendor/magento/module-inventory-catalog/Plugin/CatalogInventory/Observer/ParentItemProcessor/SkipParentItemProcessorOnMultipleSourceMode.php
new file mode 100644
index 00000000000..2812b4204fa
--- /dev/null
+++ b/vendor/magento/module-inventory-catalog/Plugin/CatalogInventory/Observer/ParentItemProcessor/SkipParentItemProcessorOnMultipleSourceMode.php
@@ -0,0 +1,51 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryCatalog\Plugin\CatalogInventory\Observer\ParentItemProcessor;
+
+use Closure;
+use Magento\Catalog\Api\Data\ProductInterface;
+use Magento\CatalogInventory\Observer\ParentItemProcessorInterface;
+use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
+
+/**
+ * Process composite product stock status.
+ */
+class SkipParentItemProcessorOnMultipleSourceMode
+{
+    /**
+     * @var IsSingleSourceModeInterface
+     */
+    private $isSingleSourceMode;
+
+    /**
+     * @param IsSingleSourceModeInterface $isSingleSourceMode
+     */
+    public function __construct(
+        IsSingleSourceModeInterface $isSingleSourceMode
+    ) {
+        $this->isSingleSourceMode = $isSingleSourceMode;
+    }
+
+    /**
+     * Process composite product stock status considering source mode.
+     *
+     * @param ParentItemProcessorInterface $subject
+     * @param Closure $proceed
+     * @param ProductInterface $product
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function aroundProcess(
+        ParentItemProcessorInterface $subject,
+        Closure $proceed,
+        ProductInterface $product
+    ): void {
+        if ($this->isSingleSourceMode->execute()) {
+            $proceed($product);
+        }
+    }
+}
\ No newline at end of file
diff --git a/vendor/magento/module-inventory-catalog/Plugin/Inventory/UpdateCompositeProductStockStatusOnDecrementSourceItemQty.php b/vendor/magento/module-inventory-catalog/Plugin/Inventory/UpdateCompositeProductStockStatusOnDecrementSourceItemQty.php
new file mode 100644
index 00000000000..673984bb109
--- /dev/null
+++ b/vendor/magento/module-inventory-catalog/Plugin/Inventory/UpdateCompositeProductStockStatusOnDecrementSourceItemQty.php
@@ -0,0 +1,79 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryCatalog\Plugin\Inventory;
+
+use Magento\Framework\Exception\NoSuchEntityException;
+use Magento\Inventory\Model\SourceItem\Command\DecrementSourceItemQty;
+use Magento\InventoryApi\Api\Data\SourceItemInterface;
+use Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorInterface;
+use Magento\InventoryCatalogApi\Model\GetProductIdsBySkusInterface;
+use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
+
+/**
+ * Update parent products stock status after decrementing quantity of children stock
+ */
+class UpdateCompositeProductStockStatusOnDecrementSourceItemQty
+{
+    /**
+     * @var GetProductIdsBySkusInterface
+     */
+    private GetProductIdsBySkusInterface $getProductIdsBySkus;
+
+    /**
+     * @var IsSingleSourceModeInterface
+     */
+    private IsSingleSourceModeInterface $isSingleSourceMode;
+
+    /**
+     * @var CompositeProductStockStatusProcessorInterface
+     */
+    private CompositeProductStockStatusProcessorInterface $compositeProductStockStatusProcessor;
+
+    /**
+     * @param GetProductIdsBySkusInterface $getProductIdsBySkus
+     * @param IsSingleSourceModeInterface $isSingleSourceMode
+     * @param CompositeProductStockStatusProcessorInterface $compositeProductStockStatusProcessor
+     */
+    public function __construct(
+        GetProductIdsBySkusInterface $getProductIdsBySkus,
+        IsSingleSourceModeInterface $isSingleSourceMode,
+        CompositeProductStockStatusProcessorInterface $compositeProductStockStatusProcessor
+    ) {
+        $this->getProductIdsBySkus = $getProductIdsBySkus;
+        $this->isSingleSourceMode = $isSingleSourceMode;
+        $this->compositeProductStockStatusProcessor = $compositeProductStockStatusProcessor;
+    }
+
+    /**
+     * Update parent products stock status after decrementing quantity of children stock
+     *
+     * @param DecrementSourceItemQty $subject
+     * @param void $result
+     * @param SourceItemInterface[] $sourceItemDecrementData
+     * @return void
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function afterExecute(DecrementSourceItemQty $subject, $result, array $sourceItemDecrementData): void
+    {
+        if ($this->isSingleSourceMode->execute()) {
+            $productIds = [];
+            $sourceItems = array_column($sourceItemDecrementData, 'source_item');
+            foreach ($sourceItems as $sourceItem) {
+                $sku = $sourceItem->getSku();
+                try {
+                    $productIds[] = (int)$this->getProductIdsBySkus->execute([$sku])[$sku];
+                } catch (NoSuchEntityException $e) {
+                    continue;
+                }
+            }
+            if ($productIds) {
+                $this->compositeProductStockStatusProcessor->execute($productIds);
+            }
+        }
+    }
+}
diff --git a/vendor/magento/module-inventory-catalog/Plugin/InventoryApi/UpdateCompositeProductStockStatusOnSourceItemsSave.php b/vendor/magento/module-inventory-catalog/Plugin/InventoryApi/UpdateCompositeProductStockStatusOnSourceItemsSave.php
new file mode 100644
index 00000000000..c79f501795e
--- /dev/null
+++ b/vendor/magento/module-inventory-catalog/Plugin/InventoryApi/UpdateCompositeProductStockStatusOnSourceItemsSave.php
@@ -0,0 +1,78 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryCatalog\Plugin\InventoryApi;
+
+use Magento\Framework\Exception\NoSuchEntityException;
+use Magento\InventoryApi\Api\Data\SourceItemInterface;
+use Magento\InventoryApi\Api\SourceItemsSaveInterface;
+use Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorInterface;
+use Magento\InventoryCatalogApi\Model\GetProductIdsBySkusInterface;
+use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
+
+/**
+ * Update parent products stock status on children products source items update
+ */
+class UpdateCompositeProductStockStatusOnSourceItemsSave
+{
+    /**
+     * @var GetProductIdsBySkusInterface
+     */
+    private GetProductIdsBySkusInterface $getProductIdsBySkus;
+
+    /**
+     * @var IsSingleSourceModeInterface
+     */
+    private IsSingleSourceModeInterface $isSingleSourceMode;
+
+    /**
+     * @var CompositeProductStockStatusProcessorInterface
+     */
+    private CompositeProductStockStatusProcessorInterface $compositeProductStockStatusProcessor;
+
+    /**
+     * @param GetProductIdsBySkusInterface $getProductIdsBySkus
+     * @param IsSingleSourceModeInterface $isSingleSourceMode
+     * @param CompositeProductStockStatusProcessorInterface $compositeProductStockStatusProcessor
+     */
+    public function __construct(
+        GetProductIdsBySkusInterface $getProductIdsBySkus,
+        IsSingleSourceModeInterface $isSingleSourceMode,
+        CompositeProductStockStatusProcessorInterface $compositeProductStockStatusProcessor
+    ) {
+        $this->getProductIdsBySkus = $getProductIdsBySkus;
+        $this->isSingleSourceMode = $isSingleSourceMode;
+        $this->compositeProductStockStatusProcessor = $compositeProductStockStatusProcessor;
+    }
+
+    /**
+     * Update parent products stock status on children products source items update
+     *
+     * @param SourceItemsSaveInterface $subject
+     * @param void $result
+     * @param SourceItemInterface[] $sourceItems
+     * @return void
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function afterExecute(SourceItemsSaveInterface $subject, $result, array $sourceItems): void
+    {
+        if ($this->isSingleSourceMode->execute()) {
+            $productIds = [];
+            foreach ($sourceItems as $sourceItem) {
+                $sku = $sourceItem->getSku();
+                try {
+                    $productIds[] = (int)$this->getProductIdsBySkus->execute([$sku])[$sku];
+                } catch (NoSuchEntityException $e) {
+                    continue;
+                }
+            }
+            if ($productIds) {
+                $this->compositeProductStockStatusProcessor->execute($productIds);
+            }
+        }
+    }
+}
diff --git a/vendor/magento/module-inventory-catalog/etc/di.xml b/vendor/magento/module-inventory-catalog/etc/di.xml
index 29bb39faa6f..86c4de09cee 100644
--- a/vendor/magento/module-inventory-catalog/etc/di.xml
+++ b/vendor/magento/module-inventory-catalog/etc/di.xml
@@ -21,10 +21,14 @@
     <type name="Magento\InventoryApi\Api\SourceItemsSaveInterface">
         <plugin name="set_data_to_legacy_catalog_inventory_at_source_items_save"
                 type="Magento\InventoryCatalog\Plugin\InventoryApi\SetDataToLegacyCatalogInventoryAtSourceItemsSavePlugin"/>
+        <plugin name="inventory_catalog_update_parent_stock_status_on_source_items_save"
+                type="Magento\InventoryCatalog\Plugin\InventoryApi\UpdateCompositeProductStockStatusOnSourceItemsSave"/>
     </type>
     <type name="Magento\Inventory\Model\SourceItem\Command\DecrementSourceItemQty">
         <plugin name="synchronize_legacy_catalog_inventory_at_source_item_decrement_quantity"
                 type="Magento\InventoryCatalog\Plugin\InventoryApi\SynchronizeLegacyStockAfterDecrementStockPlugin"/>
+        <plugin name="inventory_catalog_update_parent_stock_status_on_decrement_source_item_qty"
+                type="Magento\InventoryCatalog\Plugin\Inventory\UpdateCompositeProductStockStatusOnDecrementSourceItemQty" sortOrder="100"/>
     </type>
     <type name="Magento\InventoryIndexer\Indexer\SourceItem\Strategy\Sync">
         <plugin name="priceIndexUpdater" type="Magento\InventoryCatalog\Plugin\InventoryIndexer\Indexer\SourceItem\Strategy\Sync\PriceIndexUpdater"/>
@@ -94,6 +98,7 @@
     </type>
     <type name="Magento\Inventory\Model\SourceItem\Command\SourceItemsSaveWithoutLegacySynchronization">
         <plugin name="set_data_to_legacy_catalog_inventory_at_source_items_save" disabled="true"/>
+        <plugin name="inventory_catalog_update_parent_stock_status_on_source_items_save" disabled="true"/>
     </type>
     <type name="Magento\CatalogInventory\Api\StockRegistryInterface">
         <plugin name="adapt_get_stock_status" type="Magento\InventoryCatalog\Plugin\CatalogInventory\Api\StockRegistry\AdaptGetStockStatusPlugin"/>
@@ -187,4 +192,7 @@
             </argument>
         </arguments>
     </type>
+    <type name="Magento\CatalogInventory\Observer\ParentItemProcessorInterface">
+        <plugin name="skip_parent_stock_processors" type="Magento\InventoryCatalog\Plugin\CatalogInventory\Observer\ParentItemProcessor\SkipParentItemProcessorOnMultipleSourceMode"/>
+    </type>
 </config>
diff --git a/vendor/magento/module-inventory-catalog-api/Model/CompositeProductStockStatusProcessorInterface.php b/vendor/magento/module-inventory-catalog-api/Model/CompositeProductStockStatusProcessorInterface.php
new file mode 100644
index 00000000000..44bc9feaf09
--- /dev/null
+++ b/vendor/magento/module-inventory-catalog-api/Model/CompositeProductStockStatusProcessorInterface.php
@@ -0,0 +1,22 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryCatalogApi\Model;
+
+/**
+ * Update parent product stock status based on children stock status
+ */
+interface CompositeProductStockStatusProcessorInterface
+{
+    /**
+     * Update provided products parent products stock status
+     *
+     * @param array $productIds
+     * @return void
+     */
+    public function execute(array $productIds): void;
+}
diff --git a/vendor/magento/module-inventory-catalog-api/Model/CompositeProductStockStatusProcessorPool.php b/vendor/magento/module-inventory-catalog-api/Model/CompositeProductStockStatusProcessorPool.php
new file mode 100644
index 00000000000..a7d028d5f36
--- /dev/null
+++ b/vendor/magento/module-inventory-catalog-api/Model/CompositeProductStockStatusProcessorPool.php
@@ -0,0 +1,51 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryCatalogApi\Model;
+
+use Magento\Framework\Exception\InvalidArgumentException;
+
+class CompositeProductStockStatusProcessorPool implements CompositeProductStockStatusProcessorInterface
+{
+    /**
+     * @var CompositeProductStockStatusProcessorInterface[]
+     */
+    private array $compositeProductStockStatusProcessors;
+
+    /**
+     * Initializes dependencies
+     *
+     * @param CompositeProductStockStatusProcessorInterface[] $compositeProductStockStatusProcessors
+     * @throws InvalidArgumentException
+     */
+    public function __construct(
+        array $compositeProductStockStatusProcessors
+    ) {
+        foreach ($compositeProductStockStatusProcessors as $compositeProductStockStatusProcessor) {
+            if (!$compositeProductStockStatusProcessor instanceof CompositeProductStockStatusProcessorInterface) {
+                throw new InvalidArgumentException(
+                    __(
+                        '%1 must implement %2.',
+                        get_class($compositeProductStockStatusProcessor),
+                        CompositeProductStockStatusProcessorInterface::class
+                    )
+                );
+            }
+        }
+        $this->compositeProductStockStatusProcessors = $compositeProductStockStatusProcessors;
+    }
+
+    /**
+     * @inheritdoc
+     */
+    public function execute(array $productIds): void
+    {
+        foreach ($this->compositeProductStockStatusProcessors as $compositeProductStockStatusProcessor) {
+            $compositeProductStockStatusProcessor->execute($productIds);
+        }
+    }
+}
diff --git a/vendor/magento/module-inventory-catalog-api/etc/di.xml b/vendor/magento/module-inventory-catalog-api/etc/di.xml
index 60beb25a0d9..f3666356bb7 100644
--- a/vendor/magento/module-inventory-catalog-api/etc/di.xml
+++ b/vendor/magento/module-inventory-catalog-api/etc/di.xml
@@ -15,4 +15,6 @@
                 type="Magento\InventoryCatalogApi\Model\BulkInventoryTransferValidatorChain" />
     <preference for="Magento\InventoryCatalogApi\Model\PartialInventoryTransferValidatorInterface"
                 type="Magento\InventoryCatalogApi\Model\PartialInventoryTransferValidatorChain"/>
-</config>
\ No newline at end of file
+    <preference for="Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorInterface"
+                type="Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorPool"/>
+</config>
diff --git a/vendor/magento/module-inventory-configurable-product/Model/StockStatusProcessor.php b/vendor/magento/module-inventory-configurable-product/Model/StockStatusProcessor.php
new file mode 100644
index 00000000000..f9b14c80929
--- /dev/null
+++ b/vendor/magento/module-inventory-configurable-product/Model/StockStatusProcessor.php
@@ -0,0 +1,39 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryConfigurableProduct\Model;
+
+use Magento\ConfigurableProduct\Model\Inventory\ChangeParentStockStatus;
+use Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorInterface;
+
+/**
+ * @inheritDoc
+ */
+class StockStatusProcessor implements CompositeProductStockStatusProcessorInterface
+{
+    /**
+     * @var ChangeParentStockStatus
+     */
+    private ChangeParentStockStatus $changeParentStockStatus;
+
+    /**
+     * @param ChangeParentStockStatus $changeParentStockStatus
+     */
+    public function __construct(
+        ChangeParentStockStatus $changeParentStockStatus
+    ) {
+        $this->changeParentStockStatus = $changeParentStockStatus;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function execute(array $productIds): void
+    {
+        $this->changeParentStockStatus->execute($productIds);
+    }
+}
diff --git a/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/Observer/ParentItemProcessor/AdaptParentItemProcessorPlugin.php b/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/Observer/ParentItemProcessor/AdaptParentItemProcessorPlugin.php
deleted file mode 100644
index 7aaa84f2b43..00000000000
--- a/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/Observer/ParentItemProcessor/AdaptParentItemProcessorPlugin.php
+++ /dev/null
@@ -1,99 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\InventoryConfigurableProduct\Plugin\CatalogInventory\Observer\ParentItemProcessor;
-
-use Closure;
-use Magento\Catalog\Api\Data\ProductInterface;
-use Magento\CatalogInventory\Api\StockRegistryInterface;
-use Magento\CatalogInventory\Observer\ParentItemProcessorInterface;
-use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
-use Magento\InventoryCatalogApi\Model\GetSkusByProductIdsInterface;
-use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
-use Magento\InventoryIndexer\Model\ResourceModel\UpdateLegacyStockStatus;
-
-/**
- * Process configurable product stock status.
- */
-class AdaptParentItemProcessorPlugin
-{
-    /**
-     * @var IsSingleSourceModeInterface
-     */
-    private $isSingleSourceMode;
-
-    /**
-     * @var GetSkusByProductIdsInterface
-     */
-    private $getSkusByProductIds;
-
-    /**
-     * @var Configurable
-     */
-    private $configurableType;
-
-    /**
-     * @var UpdateLegacyStockStatus
-     */
-    private $updateLegacyStockStatus;
-
-    /**
-     * @var StockRegistryInterface
-     */
-    private $stockRegistry;
-
-    /**
-     * @param IsSingleSourceModeInterface $isSingleSourceMode
-     * @param GetSkusByProductIdsInterface $getSkusByProductIds
-     * @param Configurable $configurableType
-     * @param UpdateLegacyStockStatus $updateLegacyStockStatus
-     * @param StockRegistryInterface $stockRegistry
-     */
-    public function __construct(
-        IsSingleSourceModeInterface $isSingleSourceMode,
-        GetSkusByProductIdsInterface $getSkusByProductIds,
-        Configurable $configurableType,
-        UpdateLegacyStockStatus $updateLegacyStockStatus,
-        StockRegistryInterface $stockRegistry
-    ) {
-        $this->isSingleSourceMode = $isSingleSourceMode;
-        $this->getSkusByProductIds = $getSkusByProductIds;
-        $this->configurableType = $configurableType;
-        $this->updateLegacyStockStatus = $updateLegacyStockStatus;
-        $this->stockRegistry = $stockRegistry;
-    }
-
-    /**
-     * Process configurable product stock status considering source mode.
-     *
-     * @param ParentItemProcessorInterface $subject
-     * @param Closure $proceed
-     * @param ProductInterface $product
-     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     */
-    public function aroundProcess(
-        ParentItemProcessorInterface $subject,
-        Closure $proceed,
-        ProductInterface $product
-    ): void {
-        if ($this->isSingleSourceMode->execute()) {
-            $proceed($product);
-        } else {
-            $parentIds = $this->configurableType->getParentIdsByChild($product->getId());
-            $skus = $this->getSkusByProductIds->execute($parentIds);
-
-            $dataForUpdate = [];
-            foreach ($parentIds as $parentId) {
-                $parentStockItem = $this->stockRegistry->getStockItem($parentId);
-                if ($parentStockItem->getIsInStock()) {
-                    $dataForUpdate[$skus[$parentId]] = true;
-                }
-            }
-            $this->updateLegacyStockStatus->execute($dataForUpdate);
-        }
-    }
-}
diff --git a/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/UpdateLegacyStockItemForNewConfigurableProduct.php b/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/UpdateLegacyStockItemForNewConfigurableProduct.php
new file mode 100644
index 00000000000..0069c8e5de8
--- /dev/null
+++ b/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/UpdateLegacyStockItemForNewConfigurableProduct.php
@@ -0,0 +1,178 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryConfigurableProduct\Plugin\CatalogInventory;
+
+use Magento\Catalog\Model\ResourceModel\GetProductTypeById;
+use Magento\CatalogInventory\Model\ResourceModel\Stock\Item as ItemResourceModel;
+use Magento\CatalogInventory\Model\Stock\Item as StockItemModel;
+use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
+use Magento\Framework\App\RequestInterface;
+use Magento\Framework\Model\AbstractModel as StockItem;
+use Magento\Framework\Serialize\Serializer\Json;
+use Magento\InventoryCatalogApi\Model\GetSkusByProductIdsInterface;
+use Magento\InventorySalesApi\Api\AreProductsSalableInterface;
+use Magento\CatalogInventory\Model\Stock;
+use Magento\InventoryCatalog\Model\ResourceModel\UpdateLegacyStockItems;
+
+class UpdateLegacyStockItemForNewConfigurableProduct
+{
+    /**
+     * @var RequestInterface
+     */
+    private $request;
+
+    /**
+     * @var Json
+     */
+    private $serializer;
+
+    /**
+     * @var GetProductTypeById
+     */
+    private $getProductTypeById;
+
+    /**
+     * @var Configurable
+     */
+    private $configurableType;
+
+    /**
+     * @var GetSkusByProductIdsInterface
+     */
+    private $getSkusByProductIds;
+
+    /**
+     * @var AreProductsSalableInterface
+     */
+    private $areProductsSalable;
+
+    /**
+     * @var UpdateLegacyStockItems
+     */
+    private $updateLegacyStockItems;
+
+    /**
+     * @param RequestInterface $request
+     * @param Json $serializer
+     * @param GetProductTypeById $getProductTypeById
+     * @param Configurable $configurableType
+     * @param GetSkusByProductIdsInterface $getSkusByProductIds
+     * @param AreProductsSalableInterface $areProductsSalable
+     * @param UpdateLegacyStockItems $updateLegacyStockItems
+     */
+    public function __construct(
+        RequestInterface $request,
+        Json $serializer,
+        GetProductTypeById $getProductTypeById,
+        Configurable $configurableType,
+        GetSkusByProductIdsInterface $getSkusByProductIds,
+        AreProductsSalableInterface $areProductsSalable,
+        UpdateLegacyStockItems $updateLegacyStockItems
+    ) {
+        $this->request = $request;
+        $this->serializer = $serializer;
+        $this->getProductTypeById = $getProductTypeById;
+        $this->configurableType = $configurableType;
+        $this->getSkusByProductIds = $getSkusByProductIds;
+        $this->areProductsSalable = $areProductsSalable;
+        $this->updateLegacyStockItems = $updateLegacyStockItems;
+    }
+
+    /**
+     * Updates stock item for new configurable product based on variation's qty
+     *
+     * @param ItemResourceModel $subject
+     * @param ItemResourceModel $result
+     * @param StockItem $stockItem
+     * @return ItemResourceModel
+     *
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function afterSave(ItemResourceModel $subject, ItemResourceModel $result, StockItem $stockItem)
+    {
+        if ($stockItem->isObjectNew() &&
+            $stockItem->getIsInStock() &&
+            $this->getProductTypeById->execute($stockItem->getProductId()) === Configurable::TYPE_CODE
+        ) {
+            $configurableMatrix = $this->request->getParam('configurable-matrix-serialized');
+            if (!empty($configurableMatrix) && $configurableMatrix !== '[]') {
+                $this->updateStatus($stockItem, $this->hasStockStatusFromVariationMatrix($configurableMatrix));
+            } else {
+                $childrenIds = $this->configurableType->getChildrenIds($stockItem->getProductId());
+                $childrenIds = array_shift($childrenIds);
+                if (!empty($childrenIds)) {
+                    $this->updateStatus($stockItem, $this->hasStockStatusFromChildren($childrenIds));
+                }
+            }
+        }
+
+        return $result;
+    }
+
+    /**
+     * Updates Configurable stock status based on the variations
+     *
+     * @param StockItem $stockItem
+     * @param bool $isInStock
+     * @return void
+     */
+    private function updateStatus(StockItem $stockItem, bool $isInStock): void
+    {
+        if ($stockItem->getIsInStock() == $isInStock) {
+            return;
+        }
+        $stockItemData = [
+            StockItemModel::IS_IN_STOCK => $isInStock,
+            StockItemModel::STOCK_STATUS_CHANGED_AUTO => 1
+        ];
+        $this->updateLegacyStockItems->execute([$stockItem->getProductId()], $stockItemData);
+    }
+
+    /**
+     * Get stock status based on qty of the variation-matrix from request
+     *
+     * @param string $configurableMatrix
+     * @return bool
+     */
+    private function hasStockStatusFromVariationMatrix(string $configurableMatrix): bool
+    {
+        $configurableMatrix = $this->serializer->unserialize($configurableMatrix);
+        foreach ($configurableMatrix as $item) {
+            if (!empty($item['qty'])) {
+                return true;
+            } elseif (!empty($item['quantity_per_source'])) {
+                foreach ($item['quantity_per_source'] as $source) {
+                    if (!empty($source['quantity_per_source'])) {
+                        return true;
+                    }
+                }
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Checks if configurable has salable options
+     *
+     * @param array $childrenIds
+     * @return bool
+     */
+    private function hasStockStatusFromChildren(array $childrenIds): bool
+    {
+        $skus = $this->getSkusByProductIds->execute($childrenIds);
+        $areSalableResults = $this->areProductsSalable->execute($skus, Stock::DEFAULT_STOCK_ID);
+        foreach ($areSalableResults as $productSalable) {
+            if ($productSalable->isSalable() === true) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
diff --git a/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/UpdateLegacyStockStatusForConfigurableProduct.php b/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/UpdateLegacyStockStatusForConfigurableProduct.php
new file mode 100644
index 00000000000..4bfd3fb71cb
--- /dev/null
+++ b/vendor/magento/module-inventory-configurable-product/Plugin/CatalogInventory/UpdateLegacyStockStatusForConfigurableProduct.php
@@ -0,0 +1,146 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryConfigurableProduct\Plugin\CatalogInventory;
+
+use Magento\Catalog\Model\ResourceModel\GetProductTypeById;
+use Magento\CatalogInventory\Model\ResourceModel\Stock\Item as ItemResourceModel;
+use Magento\Framework\Model\AbstractModel as StockItem;
+use Magento\InventoryCatalog\Model\ResourceModel\SetDataToLegacyStockStatus;
+use Magento\InventoryCatalogApi\Model\GetSkusByProductIdsInterface;
+use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
+use Magento\CatalogInventory\Model\Stock;
+use Magento\InventorySalesApi\Api\AreProductsSalableInterface;
+use Magento\InventoryConfiguration\Model\GetLegacyStockItem;
+
+/**
+ * Class provides after Plugin on Magento\CatalogInventory\Model\ResourceModel\Stock\Item::save
+ * to update legacy stock status for configurable product
+ */
+class UpdateLegacyStockStatusForConfigurableProduct
+{
+    /**
+     * @var GetProductTypeById
+     */
+    private $getProductTypeById;
+
+    /**
+     * @var SetDataToLegacyStockStatus
+     */
+    private $setDataToLegacyStockStatus;
+
+    /**
+     * @var GetSkusByProductIdsInterface
+     */
+    private $getSkusByProductIds;
+
+    /**
+     * @var Configurable
+     */
+    private $configurableType;
+
+    /**
+     * @var AreProductsSalableInterface
+     */
+    private $areProductsSalable;
+
+    /**
+     * @var GetLegacyStockItem
+     */
+    private $getLegacyStockItem;
+
+    /**
+     * @param GetProductTypeById $getProductTypeById
+     * @param SetDataToLegacyStockStatus $setDataToLegacyStockStatus
+     * @param GetSkusByProductIdsInterface $getSkusByProductIds
+     * @param Configurable $configurableType
+     * @param AreProductsSalableInterface $areProductsSalable
+     * @param GetLegacyStockItem $getLegacyStockItem
+     */
+    public function __construct(
+        GetProductTypeById $getProductTypeById,
+        SetDataToLegacyStockStatus $setDataToLegacyStockStatus,
+        GetSkusByProductIdsInterface $getSkusByProductIds,
+        Configurable $configurableType,
+        AreProductsSalableInterface $areProductsSalable,
+        GetLegacyStockItem $getLegacyStockItem
+    ) {
+        $this->getProductTypeById = $getProductTypeById;
+        $this->setDataToLegacyStockStatus = $setDataToLegacyStockStatus;
+        $this->getSkusByProductIds = $getSkusByProductIds;
+        $this->configurableType = $configurableType;
+        $this->areProductsSalable = $areProductsSalable;
+        $this->getLegacyStockItem = $getLegacyStockItem;
+    }
+
+    /**
+     * Update source item for legacy stock of a configurable product
+     *
+     * @param ItemResourceModel $subject
+     * @param ItemResourceModel $result
+     * @param StockItem $stockItem
+     * @return ItemResourceModel
+     * @throws Exception
+     *
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function afterSave(ItemResourceModel $subject, ItemResourceModel $result, StockItem $stockItem)
+    {
+        if ($stockItem->getIsInStock() &&
+            $this->getProductTypeById->execute($stockItem->getProductId()) === Configurable::TYPE_CODE
+        ) {
+            $productSku = $this->getSkusByProductIds
+                ->execute([$stockItem->getProductId()])[$stockItem->getProductId()];
+
+            if ($stockItem->getStockStatusChangedAuto() ||
+                ($this->stockStatusChange($productSku) && $this->hasChildrenInStock($stockItem->getProductId()))
+            ) {
+                $this->setDataToLegacyStockStatus->execute(
+                    $productSku,
+                    (float) $stockItem->getQty(),
+                    Stock::STOCK_IN_STOCK
+                );
+            }
+        }
+
+        return $result;
+    }
+
+    /**
+     * Checks if configurable product stock item status was changed
+     *
+     * @param string $sku
+     * @return bool
+     */
+    private function stockStatusChange(string $sku): bool
+    {
+        return $this->getLegacyStockItem->execute($sku)->getIsInStock() == Stock::STOCK_OUT_OF_STOCK;
+    }
+
+    /**
+     * Checks if configurable has salable options
+     *
+     * @param int $productId
+     * @return bool
+     */
+    private function hasChildrenInStock(int $productId): bool
+    {
+        $childrenIds = $this->configurableType->getChildrenIds($productId);
+        if (empty($childrenIds)) {
+            return false;
+        }
+        $skus = $this->getSkusByProductIds->execute(array_shift($childrenIds));
+        $areSalableResults = $this->areProductsSalable->execute($skus, Stock::DEFAULT_STOCK_ID);
+        foreach ($areSalableResults as $productSalable) {
+            if ($productSalable->isSalable() === true) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/vendor/magento/module-inventory-configurable-product/Plugin/InventoryApi/UpdateConfigurableProductParentStockStatus.php b/vendor/magento/module-inventory-configurable-product/Plugin/InventoryApi/UpdateConfigurableProductParentStockStatus.php
new file mode 100644
index 00000000000..f00507d738d
--- /dev/null
+++ b/vendor/magento/module-inventory-configurable-product/Plugin/InventoryApi/UpdateConfigurableProductParentStockStatus.php
@@ -0,0 +1,89 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryConfigurableProduct\Plugin\InventoryApi;
+
+use Magento\Framework\Exception\NoSuchEntityException;
+use Magento\InventoryApi\Api\Data\SourceItemInterface;
+use Magento\InventoryApi\Api\SourceItemsSaveInterface;
+use Magento\InventoryCatalogApi\Model\GetProductIdsBySkusInterface;
+use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
+use Magento\ConfigurableProduct\Model\Inventory\ChangeParentStockStatus;
+use Magento\Store\Model\StoreManagerInterface;
+
+/**
+ * Update configurable product parent stock status
+ *
+ * Update product status based on the available stock of the child product
+ */
+class UpdateConfigurableProductParentStockStatus
+{
+    /**
+     * @var ChangeParentStockStatus
+     */
+    private $changeParentStockStatus;
+
+    /**
+     * @var GetProductIdsBySkusInterface
+     */
+    private $getProductIdsBySkus;
+
+    /**
+     * @var IsSingleSourceModeInterface
+     */
+    private $isSingleSourceMode;
+
+    /**
+     * @var StoreManagerInterface
+     */
+    private $storeManager;
+
+    /**
+     * @param GetProductIdsBySkusInterface $getProductIdsBySkus
+     * @param ChangeParentStockStatus $changeParentStockStatus
+     * @param IsSingleSourceModeInterface $isSingleSourceMode
+     * @param StoreManagerInterface $storeManager
+     */
+    public function __construct(
+        GetProductIdsBySkusInterface $getProductIdsBySkus,
+        ChangeParentStockStatus $changeParentStockStatus,
+        IsSingleSourceModeInterface $isSingleSourceMode,
+        StoreManagerInterface $storeManager
+    ) {
+        $this->getProductIdsBySkus = $getProductIdsBySkus;
+        $this->changeParentStockStatus = $changeParentStockStatus;
+        $this->isSingleSourceMode = $isSingleSourceMode;
+        $this->storeManager = $storeManager;
+    }
+
+    /**
+     *  Make configurable product out of stock if all its children out of stock
+     *
+     * @param SourceItemsSaveInterface $subject
+     * @param void $result
+     * @param SourceItemInterface[] $sourceItems
+     * @return void
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function afterExecute(SourceItemsSaveInterface $subject, $result, array $sourceItems): void
+    {
+        $productIds = [];
+        if ($this->isSingleSourceMode->execute() && $this->storeManager->hasSingleStore()) {
+            foreach ($sourceItems as $sourceItem) {
+                $sku = $sourceItem->getSku();
+                try {
+                    $productIds[] = (int)$this->getProductIdsBySkus->execute([$sku])[$sku];
+                } catch (NoSuchEntityException $e) {
+                    $productIds = [];
+                }
+            }
+            if ($productIds) {
+                $this->changeParentStockStatus->execute($productIds);
+            }
+        }
+    }
+}
diff --git a/vendor/magento/module-inventory-configurable-product/Plugin/Model/UpdateParentStockStatus.php b/vendor/magento/module-inventory-configurable-product/Plugin/Model/UpdateParentStockStatus.php
new file mode 100644
index 00000000000..02c6fad51f9
--- /dev/null
+++ b/vendor/magento/module-inventory-configurable-product/Plugin/Model/UpdateParentStockStatus.php
@@ -0,0 +1,129 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryConfigurableProduct\Plugin\Model;
+
+use Magento\CatalogInventory\Api\StockRegistryInterface;
+use Magento\ConfigurableProduct\Model\Product\Type\Configurable;
+use Magento\Framework\Exception\NoSuchEntityException;
+use Magento\Inventory\Model\SourceItem\Command\Handler\SourceItemsSaveHandler;
+use Magento\InventoryCatalogApi\Model\GetProductIdsBySkusInterface;
+use Magento\InventoryCatalogApi\Model\GetSkusByProductIdsInterface;
+use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
+use Magento\InventoryIndexer\Model\ResourceModel\UpdateLegacyStockStatus;
+
+class UpdateParentStockStatus
+{
+    /**
+     * @var IsSingleSourceModeInterface
+     */
+    private IsSingleSourceModeInterface $isSingleSourceMode;
+
+    /**
+     * @var GetSkusByProductIdsInterface
+     */
+    private GetSkusByProductIdsInterface $getSkusByProductIds;
+
+    /**
+     * @var GetProductIdsBySkusInterface
+     */
+    private GetProductIdsBySkusInterface $getProductIdsBySkus;
+
+    /**
+     * @var Configurable
+     */
+    private Configurable $configurableType;
+
+    /**
+     * @var UpdateLegacyStockStatus
+     */
+    private UpdateLegacyStockStatus $updateLegacyStockStatus;
+
+    /**
+     * @var StockRegistryInterface
+     */
+    private StockRegistryInterface $stockRegistry;
+
+    /**
+     * @param IsSingleSourceModeInterface $isSingleSourceMode
+     * @param GetSkusByProductIdsInterface $getSkusByProductIds
+     * @param GetProductIdsBySkusInterface $getProductIdsBySkus
+     * @param Configurable $configurableType
+     * @param UpdateLegacyStockStatus $updateLegacyStockStatus
+     * @param StockRegistryInterface $stockRegistry
+     */
+    public function __construct(
+        IsSingleSourceModeInterface $isSingleSourceMode,
+        GetSkusByProductIdsInterface $getSkusByProductIds,
+        GetProductIdsBySkusInterface $getProductIdsBySkus,
+        Configurable $configurableType,
+        UpdateLegacyStockStatus $updateLegacyStockStatus,
+        StockRegistryInterface $stockRegistry
+    ) {
+        $this->isSingleSourceMode = $isSingleSourceMode;
+        $this->getSkusByProductIds = $getSkusByProductIds;
+        $this->getProductIdsBySkus = $getProductIdsBySkus;
+        $this->configurableType = $configurableType;
+        $this->updateLegacyStockStatus = $updateLegacyStockStatus;
+        $this->stockRegistry = $stockRegistry;
+    }
+
+    /**
+     * Process configurable product stock status considering source mode.
+     *
+     * @param SourceItemsSaveHandler $subject
+     * @param void $result
+     * @param array $sourceItems
+     * @return void
+     * @throws NoSuchEntityException
+     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
+     */
+    public function afterExecute(
+        SourceItemsSaveHandler $subject,
+                               $result,
+        array $sourceItems
+    ): void {
+        if (!$this->isSingleSourceMode->execute()) {
+            $productIds = $this->getProductIds($sourceItems);
+            $parentIds = $this->configurableType->getParentIdsByChild($productIds);
+            $skus = $this->getSkusByProductIds->execute($parentIds);
+
+            $dataForUpdate = [];
+            foreach ($parentIds as $parentId) {
+                $parentStockItem = $this->stockRegistry->getStockItem($parentId);
+                if ($parentStockItem->getIsInStock()) {
+                    $dataForUpdate[$skus[$parentId]] = true;
+                }
+            }
+            if (count($dataForUpdate)) {
+                $this->updateLegacyStockStatus->execute($dataForUpdate);
+            }
+        }
+    }
+
+    /**
+     * Get product ids
+     *
+     * @param array $sourceItems
+     * @return array
+     */
+    private function getProductIds(array $sourceItems): array
+    {
+        $productIds = [];
+        foreach ($sourceItems as $sourceItem) {
+            if ($sourceItem->getStatus()) {
+                try {
+                    $sku = $sourceItem->getSku();
+                    $productIds[$sku] ??= (int) $this->getProductIdsBySkus->execute([$sku])[$sku];
+                } catch (NoSuchEntityException $e) {
+                    continue;
+                }
+            }
+        }
+        return $productIds;
+    }
+}
\ No newline at end of file
diff --git a/vendor/magento/module-inventory-configurable-product/etc/di.xml b/vendor/magento/module-inventory-configurable-product/etc/di.xml
index 7b32be4f885..f537340eba7 100644
--- a/vendor/magento/module-inventory-configurable-product/etc/di.xml
+++ b/vendor/magento/module-inventory-configurable-product/etc/di.xml
@@ -24,9 +24,6 @@
             <argument name="baseSelectProcessor" xsi:type="object">Magento\InventoryConfigurableProduct\Pricing\Price\LowestPriceOptionsProvider\StockStatusBaseSelectProcessor</argument>
         </arguments>
     </type>
-    <type name="Magento\CatalogInventory\Observer\ParentItemProcessorInterface">
-        <plugin name="adapt_parent_stock_processor" type="Magento\InventoryConfigurableProduct\Plugin\CatalogInventory\Observer\ParentItemProcessor\AdaptParentItemProcessorPlugin"/>
-    </type>
     <type name="Magento\ConfigurableProduct\Model\ResourceModel\Product\Indexer\Price\OptionsSelectBuilder">
         <arguments>
             <argument name="selectProcessor" xsi:type="object">Magento\InventoryConfigurableProduct\Pricing\Price\Indexer\BaseStockStatusSelectProcessor</argument>
@@ -36,8 +33,27 @@
         <plugin name="inventory_catalog_add_qty_to_legacy_stock_configurable"
                 type="Magento\InventoryConfigurableProduct\Plugin\CatalogInventory\Api\StockRegistry\SetQtyToLegacyStock"/>
     </type>
-    <type name="Magento\Inventory\Model\SourceItem\Command\DecrementSourceItemQty">
-        <plugin name="update_parent_configurable_product_stock_status_in_legacy_stock"
-                type="Magento\InventoryConfigurableProduct\Plugin\InventoryApi\UpdateParentStockStatusInLegacyStockPlugin"/>
+    <type name="Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorPool">
+        <arguments>
+            <argument name="compositeProductStockStatusProcessors" xsi:type="array">
+                <item name="configurable" xsi:type="object">Magento\InventoryConfigurableProduct\Model\StockStatusProcessor</item>
+            </argument>
+        </arguments>
+    </type>
+    <type name="Magento\InventoryApi\Api\SourceItemsSaveInterface">
+        <plugin name="update_configurable_product_parent_stock_status"
+                type="Magento\InventoryConfigurableProduct\Plugin\InventoryApi\UpdateConfigurableProductParentStockStatus"/>
+    </type>
+    <type name="Magento\Inventory\Model\SourceItem\Command\Handler\SourceItemsSaveHandler">
+        <plugin name="update_parent_stock_status" type="Magento\InventoryConfigurableProduct\Plugin\Model\UpdateParentStockStatus"/>
+    </type>
+    <type name="Magento\CatalogInventory\Model\ResourceModel\Stock\Item">
+        <plugin name="after_update_stock_item_for_new_configurable_product"
+                type="Magento\InventoryConfigurableProduct\Plugin\CatalogInventory\UpdateLegacyStockItemForNewConfigurableProduct"
+                sortOrder="100"/>
+        <plugin name="update_source_stock_for_configurable_product"
+                type="Magento\InventoryConfigurableProduct\Plugin\CatalogInventory\UpdateLegacyStockStatusForConfigurableProduct"
+                sortOrder="200"/>
+
     </type>
 </config>
diff --git a/vendor/magento/module-inventory-grouped-product/Model/StockStatusProcessor.php b/vendor/magento/module-inventory-grouped-product/Model/StockStatusProcessor.php
new file mode 100644
index 00000000000..5f137623862
--- /dev/null
+++ b/vendor/magento/module-inventory-grouped-product/Model/StockStatusProcessor.php
@@ -0,0 +1,41 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\InventoryGroupedProduct\Model;
+
+use Magento\GroupedProduct\Model\Inventory\ChangeParentStockStatus;
+use Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorInterface;
+
+/**
+ * @inheritDoc
+ */
+class StockStatusProcessor implements CompositeProductStockStatusProcessorInterface
+{
+    /**
+     * @var ChangeParentStockStatus
+     */
+    private ChangeParentStockStatus $changeParentStockStatus;
+
+    /**
+     * @param ChangeParentStockStatus $changeParentStockStatus
+     */
+    public function __construct(
+        ChangeParentStockStatus $changeParentStockStatus
+    ) {
+        $this->changeParentStockStatus = $changeParentStockStatus;
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function execute(array $productIds): void
+    {
+        foreach ($productIds as $productId) {
+            $this->changeParentStockStatus->execute($productId);
+        }
+    }
+}
diff --git a/vendor/magento/module-inventory-grouped-product/Plugin/InventoryCatalog/Model/UpdateParentStockStatusPlugin.php b/vendor/magento/module-inventory-grouped-product/Plugin/InventoryCatalog/Model/UpdateParentStockStatusPlugin.php
deleted file mode 100644
index a8381d474a2..00000000000
--- a/vendor/magento/module-inventory-grouped-product/Plugin/InventoryCatalog/Model/UpdateParentStockStatusPlugin.php
+++ /dev/null
@@ -1,79 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\InventoryGroupedProduct\Plugin\InventoryCatalog\Model;
-
-use Magento\Framework\Exception\NoSuchEntityException;
-use Magento\Framework\Message\ManagerInterface;
-use Magento\InventoryCatalog\Model\UpdateInventory;
-use Magento\InventoryCatalog\Model\UpdateInventory\InventoryData;
-use Magento\GroupedProduct\Model\Inventory\ChangeParentStockStatus;
-use Magento\InventoryCatalogApi\Model\GetProductIdsBySkusInterface;
-
-/**
- * Disable Source items management for grouped product type.
- */
-class UpdateParentStockStatusPlugin
-{
-    /**
-     * @var ManagerInterface
-     */
-    private $messageManager;
-
-    /**
-     * @var ChangeParentStockStatus
-     */
-    private $changeParentStockStatus;
-
-    /**
-     * @var GetProductIdsBySkusInterface
-     */
-    private $getProductIdsBySkus;
-
-    /**
-     * @param ManagerInterface $messageManager
-     * @param ChangeParentStockStatus $changeParentStockStatus
-     * @param GetProductIdsBySkusInterface $getProductIdsBySkus
-     */
-    public function __construct(
-        ManagerInterface $messageManager,
-        ChangeParentStockStatus $changeParentStockStatus,
-        GetProductIdsBySkusInterface $getProductIdsBySkus
-    ) {
-        $this->messageManager = $messageManager;
-        $this->changeParentStockStatus = $changeParentStockStatus;
-        $this->getProductIdsBySkus = $getProductIdsBySkus;
-    }
-
-    /**
-     * After execute plugin
-     *
-     * @param UpdateInventory $subject
-     * @param mixed $result
-     * @param InventoryData $data
-     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     */
-    public function afterExecute(UpdateInventory $subject, $result, InventoryData $data)
-    {
-        $skus = $data->getSkus();
-        try {
-            $productIds = $this->getProductIdsBySkus->execute($skus);
-        } catch (NoSuchEntityException $e) {
-            $productIds = [];
-        }
-        try {
-            foreach ($productIds as $productId) {
-                $this->changeParentStockStatus->execute((int)$productId);
-            }
-        } catch (\Exception $e) {
-            $this->messageManager->addExceptionMessage(
-                $e,
-                __('Something went wrong while updating the product(s) stock status.')
-            );
-        }
-    }
-}
diff --git a/vendor/magento/module-inventory-grouped-product/etc/di.xml b/vendor/magento/module-inventory-grouped-product/etc/di.xml
index 7375b46ff18..cecb0ac36e5 100644
--- a/vendor/magento/module-inventory-grouped-product/etc/di.xml
+++ b/vendor/magento/module-inventory-grouped-product/etc/di.xml
@@ -10,7 +10,11 @@
         <plugin name="disable_grouped_type"
                 type="Magento\InventoryGroupedProduct\Plugin\InventoryConfigurationApi\IsSourceItemManagementAllowedForProductType\DisableGroupedTypePlugin"/>
     </type>
-    <type name="Magento\InventoryCatalog\Model\UpdateInventory">
-        <plugin name="updateParentLegacyStockStatus" type="Magento\InventoryGroupedProduct\Plugin\InventoryCatalog\Model\UpdateParentStockStatusPlugin"/>
+    <type name="Magento\InventoryCatalogApi\Model\CompositeProductStockStatusProcessorPool">
+        <arguments>
+            <argument name="compositeProductStockStatusProcessors" xsi:type="array">
+                <item name="grouped" xsi:type="object">Magento\InventoryGroupedProduct\Model\StockStatusProcessor</item>
+            </argument>
+        </arguments>
     </type>
 </config>
diff --git a/vendor/magento/module-inventory-import-export/Plugin/Import/UpdateConfigurableProductsPlugin.php b/vendor/magento/module-inventory-import-export/Plugin/Import/UpdateConfigurableProductsPlugin.php
deleted file mode 100644
index ca1f54066ab..00000000000
--- a/vendor/magento/module-inventory-import-export/Plugin/Import/UpdateConfigurableProductsPlugin.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\InventoryImportExport\Plugin\Import;
-
-use Magento\CatalogImportExport\Model\StockItemImporterInterface;
-use Magento\ConfigurableProduct\Model\Inventory\ChangeParentStockStatus;
-use Magento\InventoryCatalogApi\Model\IsSingleSourceModeInterface;
-
-class UpdateConfigurableProductsPlugin
-{
-    /**
-     * @var ChangeParentStockStatus
-     */
-    private $changeParentStockStatus;
-
-    /**
-     * @var IsSingleSourceModeInterface
-     */
-    private $isSingleSourceMode;
-
-    /**
-     * @param ChangeParentStockStatus $changeParentStockStatus
-     * @param IsSingleSourceModeInterface $isSingleSourceMode
-     */
-    public function __construct(
-        ChangeParentStockStatus $changeParentStockStatus,
-        IsSingleSourceModeInterface $isSingleSourceMode
-    ) {
-        $this->changeParentStockStatus = $changeParentStockStatus;
-        $this->isSingleSourceMode = $isSingleSourceMode;
-    }
-
-    /**
-     * Update configurable products stock item status based on children products stock status after import
-     *
-     * @param StockItemImporterInterface $subject
-     * @param void $result
-     * @param array $stockData
-     * @return void
-     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     */
-    public function afterImport(
-        StockItemImporterInterface $subject,
-        $result,
-        array $stockData
-    ): void {
-        if ($stockData && $this->isSingleSourceMode->execute()) {
-            $this->changeParentStockStatus->execute(array_column($stockData, 'product_id'));
-        }
-    }
-}
diff --git a/vendor/magento/module-inventory-import-export/etc/di.xml b/vendor/magento/module-inventory-import-export/etc/di.xml
index 5d0db315768..c7b505e1dad 100644
--- a/vendor/magento/module-inventory-import-export/etc/di.xml
+++ b/vendor/magento/module-inventory-import-export/etc/di.xml
@@ -27,9 +27,9 @@
         </arguments>
     </type>
     <type name="Magento\CatalogImportExport\Model\StockItemImporterInterface">
-        <plugin name="updateConfigurableProductsStockItemStatusInventory" type="Magento\InventoryImportExport\Plugin\Import\UpdateConfigurableProductsPlugin" sortOrder="100" />
         <plugin name="importStockItemDataForSourceItem" type="Magento\InventoryImportExport\Plugin\Import\SourceItemImporter" />
         <plugin name="update_configurable_products_stock_item_status" disabled="true"/>
+        <plugin name="update_grouped_product_stock_status_plugin" disabled="true"/>
     </type>
     <!-- Prevent stock indexer to execute twice as it is run by default -->
     <type name="Magento\CatalogImportExport\Model\Import\Product\StockProcessor">
