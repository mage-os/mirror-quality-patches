diff --git a/vendor/magento/module-bundle/Pricing/Adjustment/DefaultSelectionPriceListProvider.php b/vendor/magento/module-bundle/Pricing/Adjustment/DefaultSelectionPriceListProvider.php
index 297c4659cb877..05ad966b3d898 100644
--- a/vendor/magento/module-bundle/Pricing/Adjustment/DefaultSelectionPriceListProvider.php
+++ b/vendor/magento/module-bundle/Pricing/Adjustment/DefaultSelectionPriceListProvider.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright Â© Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2016 Adobe
+ * All Rights Reserved.
  */
 
 namespace Magento\Bundle\Pricing\Adjustment;
@@ -10,6 +10,9 @@
 use Magento\Bundle\Pricing\Price\BundleSelectionFactory;
 use Magento\Catalog\Model\Product;
 use Magento\Bundle\Model\Product\Price;
+use Magento\Catalog\Helper\Data as CatalogData;
+use Magento\Store\Model\StoreManagerInterface;
+use Magento\Store\Api\WebsiteRepositoryInterface;
 
 /**
  * Provide lightweight implementation which uses price index
@@ -26,16 +29,41 @@ class DefaultSelectionPriceListProvider implements SelectionPriceListProviderInt
      */
     private $priceList;
 
+    /**
+     * @var CatalogData
+     */
+    private $catalogData;
+
+    /**
+     * @var StoreManagerInterface
+     */
+    private $storeManager;
+
+    /**
+     * @var WebsiteRepositoryInterface
+     */
+    private $websiteRepository;
+
     /**
      * @param BundleSelectionFactory $bundleSelectionFactory
+     * @param CatalogData $catalogData
+     * @param StoreManagerInterface $storeManager
+     * @param WebsiteRepositoryInterface $websiteRepository
      */
-    public function __construct(BundleSelectionFactory $bundleSelectionFactory)
-    {
+    public function __construct(
+        BundleSelectionFactory $bundleSelectionFactory,
+        CatalogData $catalogData,
+        StoreManagerInterface $storeManager,
+        WebsiteRepositoryInterface $websiteRepository
+    ) {
         $this->selectionFactory = $bundleSelectionFactory;
+        $this->catalogData = $catalogData;
+        $this->storeManager = $storeManager;
+        $this->websiteRepository = $websiteRepository;
     }
 
     /**
-     * {@inheritdoc}
+     * @inheritdoc
      */
     public function getPriceList(Product $bundleProduct, $searchMin, $useRegularPrice)
     {
@@ -138,7 +166,11 @@ private function addMiniMaxPriceList(Product $bundleProduct, $selectionsCollecti
      */
     private function addMaximumMultiSelectionPriceList(Product $bundleProduct, $selectionsCollection, $useRegularPrice)
     {
-        $selectionsCollection->addPriceData();
+        $websiteId = (int)$this->storeManager->getStore()->getWebsiteId();
+        if ($websiteId === 0) {
+            $websiteId = $this->websiteRepository->getDefault()->getId();
+        }
+        $selectionsCollection->addPriceData(null, $websiteId);
 
         foreach ($selectionsCollection as $selection) {
             $this->priceList[] =  $this->selectionFactory->create(
@@ -153,6 +185,8 @@ private function addMaximumMultiSelectionPriceList(Product $bundleProduct, $sele
     }
 
     /**
+     * Adjust min price for non required options
+     *
      * @return void
      */
     private function processMinPriceForNonRequiredOptions()
