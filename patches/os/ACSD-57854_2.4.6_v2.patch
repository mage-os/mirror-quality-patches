diff --git a/vendor/magento/module-catalog/Model/Indexer/Category/Product/AbstractAction.php b/vendor/magento/module-catalog/Model/Indexer/Category/Product/AbstractAction.php
index 49d8336dddb2..9dbfe2ac17f0 100644
--- a/vendor/magento/module-catalog/Model/Indexer/Category/Product/AbstractAction.php
+++ b/vendor/magento/module-catalog/Model/Indexer/Category/Product/AbstractAction.php
@@ -6,7 +6,9 @@
 
 namespace Magento\Catalog\Model\Indexer\Category\Product;
 
+use Magento\Catalog\Api\Data\CategoryInterface;
 use Magento\Catalog\Api\Data\ProductInterface;
+use Magento\Catalog\Model\Category;
 use Magento\Catalog\Model\Product;
 use Magento\Framework\App\ObjectManager;
 use Magento\Framework\App\ResourceConnection;
@@ -286,19 +288,17 @@ protected function getPathFromCategoryId($categoryId)
     protected function getNonAnchorCategoriesSelect(Store $store)
     {
         if (!isset($this->nonAnchorSelects[$store->getId()])) {
-            $statusAttributeId = $this->config->getAttribute(
-                Product::ENTITY,
-                'status'
-            )->getId();
-            $visibilityAttributeId = $this->config->getAttribute(
-                Product::ENTITY,
-                'visibility'
-            )->getId();
+            $statusAttributeId = $this->config->getAttribute(Product::ENTITY, 'status')->getId();
+            $visibilityAttributeId = $this->config->getAttribute(Product::ENTITY, 'visibility')->getId();
+            $isActiveAttributeId = $this->config->getAttribute(Category::ENTITY, 'is_active')->getId();
 
             $rootPath = $this->getPathFromCategoryId($store->getRootCategoryId());
 
-            $metadata = $this->metadataPool->getMetadata(ProductInterface::class);
-            $linkField = $metadata->getLinkField();
+            $productMetadata = $this->metadataPool->getMetadata(ProductInterface::class);
+            $productLinkField = $productMetadata->getLinkField();
+            $categoryMetadata = $this->metadataPool->getMetadata(CategoryInterface::class);
+            $categoryLinkField = $categoryMetadata->getLinkField();
+
             $select = $this->connection->select()->from(
                 ['cc' => $this->getTable('catalog_category_entity')],
                 []
@@ -316,28 +316,37 @@ protected function getNonAnchorCategoriesSelect(Store $store)
                 []
             )->joinInner(
                 ['cpsd' => $this->getTable('catalog_product_entity_int')],
-                'cpsd.' . $linkField . ' = cpe.' . $linkField . ' AND cpsd.store_id = 0' .
-                ' AND cpsd.attribute_id = ' .
-                $statusAttributeId,
+                'cpsd.' . $productLinkField . ' = cpe.' . $productLinkField . ' AND cpsd.store_id = 0' .
+                ' AND cpsd.attribute_id = ' . $statusAttributeId,
                 []
             )->joinLeft(
                 ['cpss' => $this->getTable('catalog_product_entity_int')],
-                'cpss.' . $linkField . ' = cpe.' . $linkField . ' AND cpss.attribute_id = cpsd.attribute_id' .
-                ' AND cpss.store_id = ' .
-                $store->getId(),
+                'cpss.' . $productLinkField . ' = cpe.' . $productLinkField .
+                ' AND cpss.attribute_id = cpsd.attribute_id AND cpss.store_id = ' . $store->getId(),
                 []
             )->joinInner(
                 ['cpvd' => $this->getTable('catalog_product_entity_int')],
-                'cpvd.' . $linkField . ' = cpe.' . $linkField . ' AND cpvd.store_id = 0' .
-                ' AND cpvd.attribute_id = ' .
-                $visibilityAttributeId,
+                'cpvd.' . $productLinkField . ' = cpe.' . $productLinkField . ' AND cpvd.store_id = 0' .
+                ' AND cpvd.attribute_id = ' . $visibilityAttributeId,
                 []
             )->joinLeft(
                 ['cpvs' => $this->getTable('catalog_product_entity_int')],
-                'cpvs.' . $linkField . ' = cpe.' . $linkField . ' AND cpvs.attribute_id = cpvd.attribute_id' .
-                ' AND cpvs.store_id = ' .
-                $store->getId(),
+                'cpvs.' . $productLinkField . ' = cpe.' . $productLinkField .
+                ' AND cpvs.attribute_id = cpvd.attribute_id AND cpvs.store_id = ' . $store->getId(),
+                []
+            )->joinInner(
+                ['ccacd' => $this->getTable('catalog_category_entity_int')],
+                'ccacd.' . $categoryLinkField . ' = cc.' . $categoryLinkField . ' AND ccacd.store_id = 0' .
+                ' AND ccacd.attribute_id = ' . $isActiveAttributeId,
                 []
+            )->joinLeft(
+                ['ccacs' => $this->getTable('catalog_category_entity_int')],
+                'ccacs.' . $categoryLinkField . ' = cc.' . $categoryLinkField .
+                ' AND ccacs.attribute_id = ccacd.attribute_id AND ccacs.store_id = ' . $store->getId(),
+                []
+            )->where(
+                $this->connection->getIfNullSql('ccacs.value', 'ccacd.value') . ' = ?',
+                1
             )->where(
                 'cc.path LIKE ' . $this->connection->quote($rootPath . '/%')
             )->where(
@@ -508,10 +517,8 @@ protected function hasAnchorSelect(Store $store)
     protected function createAnchorSelect(Store $store)
     {
         $this->setCurrentStore($store);
-        $isAnchorAttributeId = $this->config->getAttribute(
-            \Magento\Catalog\Model\Category::ENTITY,
-            'is_anchor'
-        )->getId();
+        $isAnchorAttributeId = $this->config->getAttribute(Category::ENTITY, 'is_anchor')->getId();
+        $isActiveAttributeId = $this->config->getAttribute(Category::ENTITY, 'is_active')->getId();
         $statusAttributeId = $this->config->getAttribute(Product::ENTITY, 'status')->getId();
         $visibilityAttributeId = $this->config->getAttribute(Product::ENTITY, 'visibility')->getId();
         $rootCatIds = explode('/', $this->getPathFromCategoryId($store->getRootCategoryId()));
@@ -520,7 +527,7 @@ protected function createAnchorSelect(Store $store)
         $temporaryTreeTable = $this->makeTempCategoryTreeIndex();
 
         $productMetadata = $this->metadataPool->getMetadata(ProductInterface::class);
-        $categoryMetadata = $this->metadataPool->getMetadata(\Magento\Catalog\Api\Data\CategoryInterface::class);
+        $categoryMetadata = $this->metadataPool->getMetadata(CategoryInterface::class);
         $productLinkField = $productMetadata->getLinkField();
         $categoryLinkField = $categoryMetadata->getLinkField();
 
@@ -558,21 +565,18 @@ protected function createAnchorSelect(Store $store)
             []
         )->joinLeft(
             ['cpss' => $this->getTable('catalog_product_entity_int')],
-            'cpss.' . $productLinkField . ' = cpe.' . $productLinkField . ' AND cpss.attribute_id = cpsd.attribute_id' .
-            ' AND cpss.store_id = ' .
-            $store->getId(),
+            'cpss.' . $productLinkField . ' = cpe.' . $productLinkField .
+            ' AND cpss.attribute_id = cpsd.attribute_id AND cpss.store_id = ' . $store->getId(),
             []
         )->joinInner(
             ['cpvd' => $this->getTable('catalog_product_entity_int')],
             'cpvd.' . $productLinkField . ' = cpe. ' . $productLinkField . ' AND cpvd.store_id = 0' .
-            ' AND cpvd.attribute_id = ' .
-            $visibilityAttributeId,
+            ' AND cpvd.attribute_id = ' . $visibilityAttributeId,
             []
         )->joinLeft(
             ['cpvs' => $this->getTable('catalog_product_entity_int')],
             'cpvs.' . $productLinkField . ' = cpe.' . $productLinkField .
-            ' AND cpvs.attribute_id = cpvd.attribute_id ' . 'AND cpvs.store_id = ' .
-            $store->getId(),
+            ' AND cpvs.attribute_id = cpvd.attribute_id ' . 'AND cpvs.store_id = ' . $store->getId(),
             []
         )->joinInner(
             ['ccad' => $this->getTable('catalog_category_entity_int')],
@@ -582,9 +586,21 @@ protected function createAnchorSelect(Store $store)
         )->joinLeft(
             ['ccas' => $this->getTable('catalog_category_entity_int')],
             'ccas.' . $categoryLinkField . ' = cc.' . $categoryLinkField
-            . ' AND ccas.attribute_id = ccad.attribute_id AND ccas.store_id = ' .
-            $store->getId(),
+            . ' AND ccas.attribute_id = ccad.attribute_id AND ccas.store_id = ' . $store->getId(),
             []
+        )->joinInner(
+            ['ccacd' => $this->getTable('catalog_category_entity_int')],
+            'ccacd.' . $categoryLinkField . ' = cc.' . $categoryLinkField . ' AND ccacd.store_id = 0' .
+            ' AND ccacd.attribute_id = ' . $isActiveAttributeId,
+            []
+        )->joinLeft(
+            ['ccacs' => $this->getTable('catalog_category_entity_int')],
+            'ccacs.' . $categoryLinkField . ' = cc.' . $categoryLinkField
+            . ' AND ccacs.attribute_id = ccacd.attribute_id AND ccacs.store_id = ' . $store->getId(),
+            []
+        )->where(
+            $this->connection->getIfNullSql('ccacs.value', 'ccacd.value') . ' = ?',
+            1
         )->where(
             'cpw.website_id = ?',
             $store->getWebsiteId()
@@ -694,11 +710,8 @@ protected function makeTempCategoryTreeIndex()
      */
     protected function fillTempCategoryTreeIndex($temporaryName)
     {
-        $isActiveAttributeId = $this->config->getAttribute(
-            \Magento\Catalog\Model\Category::ENTITY,
-            'is_active'
-        )->getId();
-        $categoryMetadata = $this->metadataPool->getMetadata(\Magento\Catalog\Api\Data\CategoryInterface::class);
+        $isActiveAttributeId = $this->config->getAttribute(Category::ENTITY, 'is_active')->getId();
+        $categoryMetadata = $this->metadataPool->getMetadata(CategoryInterface::class);
         $categoryLinkField = $categoryMetadata->getLinkField();
         $selects = $this->prepareSelectsByRange(
             $this->connection->select()
diff --git a/vendor/magento/module-catalog-search/Model/Indexer/Fulltext/Plugin/Product/Category/Action/Rows.php b/vendor/magento/module-catalog-search/Model/Indexer/Fulltext/Plugin/Product/Category/Action/Rows.php
deleted file mode 100644
index 2b1844deb114..000000000000
--- a/vendor/magento/module-catalog-search/Model/Indexer/Fulltext/Plugin/Product/Category/Action/Rows.php
+++ /dev/null
@@ -1,52 +0,0 @@
-<?php
-/**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
- */
-declare(strict_types=1);
-
-namespace Magento\CatalogSearch\Model\Indexer\Fulltext\Plugin\Product\Category\Action;
-
-use Magento\Framework\Indexer\IndexerRegistry;
-use Magento\CatalogSearch\Model\Indexer\Fulltext as FulltextIndexer;
-use Magento\Catalog\Model\Indexer\Product\Category\Action\Rows as ActionRows;
-
-/**
- * Catalog search indexer plugin for catalog category products assignment
- */
-class Rows
-{
-    /**
-     * @var IndexerRegistry
-     */
-    private $indexerRegistry;
-
-    /**
-     * @param IndexerRegistry $indexerRegistry
-     */
-    public function __construct(IndexerRegistry $indexerRegistry)
-    {
-        $this->indexerRegistry = $indexerRegistry;
-    }
-
-    /**
-     * Reindex after catalog category product reindex
-     *
-     * @param ActionRows $subject
-     * @param ActionRows $result
-     * @param array $entityIds
-     * @return ActionRows
-     *
-     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
-     */
-    public function afterExecute(ActionRows $subject, ActionRows $result, array $entityIds): ActionRows
-    {
-        if (!empty($entityIds)) {
-            $indexer = $this->indexerRegistry->get(FulltextIndexer::INDEXER_ID);
-            if ($indexer->isScheduled()) {
-                $indexer->reindexList($entityIds);
-            }
-        }
-        return $result;
-    }
-}
diff --git a/vendor/magento/module-catalog-search/etc/di.xml b/vendor/magento/module-catalog-search/etc/di.xml
index 43ba82f047e4..f4837539d906 100644
--- a/vendor/magento/module-catalog-search/etc/di.xml
+++ b/vendor/magento/module-catalog-search/etc/di.xml
@@ -38,9 +38,6 @@
     <type name="Magento\Catalog\Model\Product\Action">
         <plugin name="catalogsearchFulltextMassAction" type="Magento\CatalogSearch\Model\Indexer\Fulltext\Plugin\Product\Action"/>
     </type>
-    <type name="Magento\Catalog\Model\Indexer\Product\Category\Action\Rows">
-        <plugin name="catalogsearchFulltextCategoryAssignment" type="Magento\CatalogSearch\Model\Indexer\Fulltext\Plugin\Product\Category\Action\Rows"/>
-    </type>
     <type name="Magento\Store\Model\ResourceModel\Store">
         <plugin name="catalogsearchFulltextIndexerStoreView" type="Magento\CatalogSearch\Model\Indexer\Fulltext\Plugin\Store\View" />
     </type>
diff --git a/vendor/magento/module-elasticsearch/Model/Indexer/Fulltext/Plugin/Category/Product/Action/Rows.php b/vendor/magento/module-elasticsearch/Model/Indexer/Fulltext/Plugin/Category/Product/Action/Rows.php
index 56f51be03d39..fd9355e64a13 100644
--- a/vendor/magento/module-elasticsearch/Model/Indexer/Fulltext/Plugin/Category/Product/Action/Rows.php
+++ b/vendor/magento/module-elasticsearch/Model/Indexer/Fulltext/Plugin/Category/Product/Action/Rows.php
@@ -75,8 +75,7 @@ public function afterExecute(
         array $entityIds,
         bool $useTempTable = false
     ): ActionRows {
-        $indexer = $this->indexerRegistry->get(FulltextIndexer::INDEXER_ID);
-        if (!empty($entityIds) && $indexer->isScheduled()) {
+        if (!empty($entityIds)) {
             $productIds = [];
 
             foreach ($this->storeManager->getStores() as $store) {
@@ -86,7 +85,12 @@ public function afterExecute(
 
             $productIds = array_merge([], ...$productIds);
             if (!empty($productIds)) {
-                $indexer->reindexList(array_unique($productIds));
+                $indexer = $this->indexerRegistry->get(FulltextIndexer::INDEXER_ID);
+                if ($indexer->isScheduled()) {
+                    $indexer->getView()->getChangelog()->addList($productIds);
+                } else {
+                    $indexer->reindexList($productIds);
+                }
             }
         }
 
diff --git a/vendor/magento/framework/Mview/View/Changelog.php b/vendor/magento/framework/Mview/View/Changelog.php
index 4cb55ced7d9d..c7529a69d2fc 100644
--- a/vendor/magento/framework/Mview/View/Changelog.php
+++ b/vendor/magento/framework/Mview/View/Changelog.php
@@ -22,17 +22,17 @@ class Changelog implements ChangelogInterface
     /**
      * Suffix for changelog table
      */
-    const NAME_SUFFIX = 'cl';
+    public const NAME_SUFFIX = 'cl';
 
     /**
      * Column name of changelog entity
      */
-    const COLUMN_NAME = 'entity_id';
+    public const COLUMN_NAME = 'entity_id';
 
     /**
      * Column name for Version ID
      */
-    const VERSION_ID_COLUMN_NAME = 'version_id';
+    public const VERSION_ID_COLUMN_NAME = 'version_id';
 
     /**
      * Database connection
@@ -304,4 +304,16 @@ public function getViewId()
     {
         return $this->viewId;
     }
+
+    /**
+     * Add list of ids to changelog
+     *
+     * @param array $ids
+     * @return void
+     */
+    public function addList(array $ids): void
+    {
+        $changelogTableName = $this->resource->getTableName($this->getName());
+        $this->connection->insertArray($changelogTableName, ['entity_id'], $ids);
+    }
 }
