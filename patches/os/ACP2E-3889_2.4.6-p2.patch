diff --git a/vendor/magento/module-advanced-search/Model/Client/ClientException.php b/vendor/magento/module-advanced-search/Model/Client/ClientException.php
new file mode 100644
index 00000000000..3e1e92c5d43
--- /dev/null
+++ b/vendor/magento/module-advanced-search/Model/Client/ClientException.php
@@ -0,0 +1,13 @@
+<?php
+/**
+ * Copyright 2025 Adobe
+ * All Rights Reserved.
+ */
+declare(strict_types=1);
+
+namespace Magento\AdvancedSearch\Model\Client;
+
+class ClientException extends \Exception
+{
+
+}
diff --git a/vendor/magento/module-catalog/Block/Product/ListProduct.php b/vendor/magento/module-catalog/Block/Product/ListProduct.php
index 5b8cb6a1919..33687b088fa 100644
--- a/vendor/magento/module-catalog/Block/Product/ListProduct.php
+++ b/vendor/magento/module-catalog/Block/Product/ListProduct.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2011 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
@@ -26,6 +26,7 @@ use Magento\Framework\Pricing\Render;
 use Magento\Framework\Url\Helper\Data;
 use Magento\Framework\App\ObjectManager;
 use Magento\Catalog\Helper\Output as OutputHelper;
+use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory;
 
 /**
  * Product list
@@ -71,6 +72,11 @@ class ListProduct extends AbstractProduct implements IdentityInterface
      */
     protected $categoryRepository;
 
+    /**
+     * @var CollectionFactory
+     */
+    private CollectionFactory $productCollectionFactory;
+
     /**
      * @param Context $context
      * @param PostHelper $postDataHelper
@@ -79,6 +85,7 @@ class ListProduct extends AbstractProduct implements IdentityInterface
      * @param Data $urlHelper
      * @param array $data
      * @param OutputHelper|null $outputHelper
+     * @param CollectionFactory|null $collectionFactory
      */
     public function __construct(
         Context $context,
@@ -87,13 +94,16 @@ class ListProduct extends AbstractProduct implements IdentityInterface
         CategoryRepositoryInterface $categoryRepository,
         Data $urlHelper,
         array $data = [],
-        ?OutputHelper $outputHelper = null
+        ?OutputHelper $outputHelper = null,
+        ?CollectionFactory $collectionFactory = null
     ) {
         $this->_catalogLayer = $layerResolver->get();
         $this->_postDataHelper = $postDataHelper;
         $this->categoryRepository = $categoryRepository;
         $this->urlHelper = $urlHelper;
         $data['outputHelper'] = $outputHelper ?? ObjectManager::getInstance()->get(OutputHelper::class);
+        $this->productCollectionFactory = $collectionFactory ??
+            ObjectManager::getInstance()->get(CollectionFactory::class);
         parent::__construct(
             $context,
             $data
@@ -196,14 +206,18 @@ class ListProduct extends AbstractProduct implements IdentityInterface
         $this->addToolbarBlock($collection);
 
         if (!$collection->isLoaded()) {
-            $collection->load();
-        }
-
-        $categoryId = $this->getLayer()->getCurrentCategory()->getId();
-
-        if ($categoryId) {
-            foreach ($collection as $product) {
-                $product->setData('category_id', $categoryId);
+            try {
+                $products = $collection->getItems();
+                if ($categoryId = $this->getLayer()->getCurrentCategory()->getId()) {
+                    foreach ($products as $product) {
+                        $product->setData('category_id', $categoryId);
+                    }
+                }
+            } catch (\Throwable) {
+                $this->setData('has_error', true);
+                $collection = $this->productCollectionFactory->create();
+                $collection->addFieldToFilter('entity_id', ['in' => []]);
+                $this->_productCollection = $collection;
             }
         }
 
diff --git a/vendor/magento/module-catalog/view/frontend/templates/product/list.phtml b/vendor/magento/module-catalog/view/frontend/templates/product/list.phtml
index 3575bf020a8..6301f933632 100644
--- a/vendor/magento/module-catalog/view/frontend/templates/product/list.phtml
+++ b/vendor/magento/module-catalog/view/frontend/templates/product/list.phtml
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2011 Adobe
+ * All Rights Reserved.
  */
 use Magento\Framework\App\Action\Action;
 
@@ -20,7 +20,7 @@ $_productCollection = $block->getLoadedProductCollection();
 /** @var \Magento\Catalog\Helper\Output $_helper */
 $_helper = $block->getData('outputHelper');
 ?>
-<?php if (!$_productCollection->count()): ?>
+<?php if ($block->getData('has_error') || !$_productCollection->count()): ?>
     <div class="message info empty">
         <div><?= $escaper->escapeHtml(__('We can\'t find products matching the selection.')) ?></div>
     </div>
diff --git a/vendor/magento/module-catalog-graph-ql/Model/Resolver/Layer/DataProvider/Filters.php b/vendor/magento/module-catalog-graph-ql/Model/Resolver/Layer/DataProvider/Filters.php
index f6d8edf1fe9..2ea0881190a 100644
--- a/vendor/magento/module-catalog-graph-ql/Model/Resolver/Layer/DataProvider/Filters.php
+++ b/vendor/magento/module-catalog-graph-ql/Model/Resolver/Layer/DataProvider/Filters.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2018 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
@@ -10,6 +10,7 @@ namespace Magento\CatalogGraphQl\Model\Resolver\Layer\DataProvider;
 use Magento\Catalog\Model\Layer\Filter\AbstractFilter;
 use Magento\CatalogGraphQl\Model\Resolver\Layer\FiltersProvider;
 use Magento\Catalog\Model\Layer\Filter\Item;
+use Magento\Framework\Exception\LocalizedException;
 
 /**
  * Layered navigation filters data provider.
@@ -45,7 +46,7 @@ class Filters
      * @param string $layerType
      * @param array|null $attributesToFilter
      * @return array
-     * @throws \Magento\Framework\Exception\LocalizedException
+     * @throws LocalizedException
      */
     public function getData(string $layerType, array $attributesToFilter = null) : array
     {
@@ -76,11 +77,11 @@ class Filters
      * Check for adding filter to the list
      *
      * @param AbstractFilter $filter
-     * @param array $attributesToFilter
+     * @param array|null $attributesToFilter
      * @return bool
-     * @throws \Magento\Framework\Exception\LocalizedException
+     * @throws LocalizedException
      */
-    private function isNeedToAddFilter(AbstractFilter $filter, array $attributesToFilter): bool
+    private function isNeedToAddFilter(AbstractFilter $filter, ?array $attributesToFilter = null): bool
     {
         if ($attributesToFilter === null) {
             $result = (bool)$filter->getItemsCount();
diff --git a/vendor/magento/module-catalog-graph-ql/Model/Resolver/LayerFilters.php b/vendor/magento/module-catalog-graph-ql/Model/Resolver/LayerFilters.php
index 78ac45a1ad0..9bd8280731f 100644
--- a/vendor/magento/module-catalog-graph-ql/Model/Resolver/LayerFilters.php
+++ b/vendor/magento/module-catalog-graph-ql/Model/Resolver/LayerFilters.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2018 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
@@ -57,7 +57,7 @@ class LayerFilters implements ResolverInterface
     private function prepareAttributesResults(array $value): ?array
     {
         $attributes = [];
-        if (!empty($value['search_result'])) {
+        if (!empty($value['search_result']) && $value['search_result']->getSearchAggregation()) {
             $buckets = $value['search_result']->getSearchAggregation()->getBuckets();
             foreach ($buckets as $bucket) {
                 if (!empty($bucket->getValues())) {
diff --git a/vendor/magento/module-catalog-graph-ql/Model/Resolver/Products/Query/Search.php b/vendor/magento/module-catalog-graph-ql/Model/Resolver/Products/Query/Search.php
index c4d189cd7cb..9d59ae9a1ab 100644
--- a/vendor/magento/module-catalog-graph-ql/Model/Resolver/Products/Query/Search.php
+++ b/vendor/magento/module-catalog-graph-ql/Model/Resolver/Products/Query/Search.php
@@ -1,12 +1,13 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2017 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
 namespace Magento\CatalogGraphQl\Model\Resolver\Products\Query;
 
+use Magento\AdvancedSearch\Model\Client\ClientException;
 use Magento\CatalogGraphQl\DataProvider\Product\SearchCriteriaBuilder;
 use Magento\CatalogGraphQl\Model\Resolver\Products\DataProvider\ProductSearch;
 use Magento\CatalogGraphQl\Model\Resolver\Products\Query\Search\QueryPopularity;
@@ -31,47 +32,47 @@ class Search implements ProductQueryInterface
     /**
      * @var SearchInterface
      */
-    private $search;
+    private SearchInterface $search;
 
     /**
      * @var SearchResultFactory
      */
-    private $searchResultFactory;
+    private SearchResultFactory $searchResultFactory;
 
     /**
      * @var PageSizeProvider
      */
-    private $pageSizeProvider;
+    private PageSizeProvider $pageSizeProvider;
 
     /**
      * @var FieldSelection
      */
-    private $fieldSelection;
+    private FieldSelection $fieldSelection;
 
     /**
      * @var ArgumentsProcessorInterface
      */
-    private $argsSelection;
+    private ArgumentsProcessorInterface $argsSelection;
 
     /**
      * @var ProductSearch
      */
-    private $productsProvider;
+    private ProductSearch $productsProvider;
 
     /**
      * @var SearchCriteriaBuilder
      */
-    private $searchCriteriaBuilder;
+    private SearchCriteriaBuilder $searchCriteriaBuilder;
 
     /**
      * @var Suggestions
      */
-    private $suggestions;
+    private Suggestions $suggestions;
 
     /**
      * @var QueryPopularity
      */
-    private $queryPopularity;
+    private QueryPopularity $queryPopularity;
 
     /**
      * @param SearchInterface $search
@@ -123,56 +124,61 @@ class Search implements ProductQueryInterface
         ContextInterface $context
     ): SearchResult {
         $searchCriteria = $this->buildSearchCriteria($args, $info);
-
-        $realPageSize = $searchCriteria->getPageSize();
-        $realCurrentPage = $searchCriteria->getCurrentPage();
-        //Because of limitations of sort and pagination on search API we will query all IDS
-        $pageSize = $this->pageSizeProvider->getMaxPageSize();
-        $searchCriteria->setPageSize($pageSize);
-        $searchCriteria->setCurrentPage(0);
-        $itemsResults = $this->search->search($searchCriteria);
-
-        //Address limitations of sort and pagination on search API apply original pagination from GQL query
-        $searchCriteria->setPageSize($realPageSize);
-        $searchCriteria->setCurrentPage($realCurrentPage);
-        $searchResults = $this->productsProvider->getList(
-            $searchCriteria,
-            $itemsResults,
-            $this->fieldSelection->getProductsFieldSelection($info),
-            $context
-        );
-
-        $totalPages = $realPageSize ? ((int)ceil($searchResults->getTotalCount() / $realPageSize)) : 0;
-
-        // add query statistics data
-        if (!empty($args['search'])) {
-            $this->queryPopularity->execute($context, $args['search'], (int) $searchResults->getTotalCount());
-        }
-
-        $productArray = [];
-        /** @var \Magento\Catalog\Model\Product $product */
-        foreach ($searchResults->getItems() as $product) {
-            $productArray[$product->getId()] = $product->getData();
-            $productArray[$product->getId()]['model'] = $product;
+        try {
+            $itemsResults = $this->search->search($searchCriteria);
+            $searchResults = $this->productsProvider->getList(
+                $searchCriteria,
+                $itemsResults,
+                $this->fieldSelection->getProductsFieldSelection($info),
+                $context
+            );
+
+            $totalPages = $searchCriteria->getPageSize()
+                ? ((int)ceil($searchResults->getTotalCount() / $searchCriteria->getPageSize()))
+                : 0;
+
+            // add query statistics data
+            if (!empty($args['search'])) {
+                $this->queryPopularity->execute($context, $args['search'], (int) $searchResults->getTotalCount());
+            }
+
+            $productArray = [];
+            /** @var \Magento\Catalog\Model\Product $product */
+            foreach ($searchResults->getItems() as $product) {
+                $productArray[$product->getId()] = $product->getData();
+                $productArray[$product->getId()]['model'] = $product;
+            }
+
+            $suggestions = [];
+            $totalCount = (int) $searchResults->getTotalCount();
+            if ($totalCount === 0 && !empty($args['search'])) {
+                $suggestions = $this->suggestions->execute($context, $args['search']);
+            }
+
+            return $this->searchResultFactory->create(
+                [
+                    'totalCount' => $totalCount,
+                    'productsSearchResult' => $productArray,
+                    'searchAggregation' => $itemsResults->getAggregations(),
+                    'pageSize' => $args['pageSize'],
+                    'currentPage' => $args['currentPage'],
+                    'totalPages' => $totalPages,
+                    'suggestions' => $suggestions,
+                ]
+            );
+        } catch (\InvalidArgumentException|ClientException) {
+            return $this->searchResultFactory->create(
+                [
+                    'totalCount' => 0,
+                    'productsSearchResult' => [],
+                    'searchAggregation' => null,
+                    'pageSize' => $args['pageSize'],
+                    'currentPage' => $args['currentPage'],
+                    'totalPages' => 0,
+                    'suggestions' => [],
+                ]
+            );
         }
-
-        $suggestions = [];
-        $totalCount = (int) $searchResults->getTotalCount();
-        if ($totalCount === 0 && !empty($args['search'])) {
-            $suggestions = $this->suggestions->execute($context, $args['search']);
-        }
-
-        return $this->searchResultFactory->create(
-            [
-                'totalCount' => $totalCount,
-                'productsSearchResult' => $productArray,
-                'searchAggregation' => $itemsResults->getAggregations(),
-                'pageSize' => $realPageSize,
-                'currentPage' => $realCurrentPage,
-                'totalPages' => $totalPages,
-                'suggestions' => $suggestions,
-            ]
-        );
     }
 
     /**
diff --git a/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Adapter.php b/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Adapter.php
index d77652c616c..00c2ccd8091 100644
--- a/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Adapter.php
+++ b/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Adapter.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2017 Adobe
+ * All Rights Reserved.
  */
 namespace Magento\Elasticsearch\Elasticsearch5\SearchAdapter;
 
@@ -13,6 +13,7 @@ use Magento\Framework\Search\AdapterInterface;
 use Magento\Framework\Search\RequestInterface;
 use Magento\Framework\Search\Response\QueryResponse;
 use Psr\Log\LoggerInterface;
+use Magento\AdvancedSearch\Model\Client\ClientException;
 
 /**
  * Elasticsearch Search Adapter
@@ -48,23 +49,6 @@ class Adapter implements AdapterInterface
      */
     private $queryContainerFactory;
 
-    /**
-     * Empty response from Elasticsearch.
-     *
-     * @var array
-     */
-    private static $emptyRawResponse = [
-        'hits' => [
-            'hits' => []
-        ],
-        'aggregations' => [
-            'price_bucket' => [],
-            'category_bucket' => [
-                'buckets' => []
-            ]
-        ]
-    ];
-
     /**
      * @var LoggerInterface
      */
@@ -99,6 +83,7 @@ class Adapter implements AdapterInterface
      *
      * @param RequestInterface $request
      * @return QueryResponse
+     * @throws ClientException
      */
     public function query(RequestInterface $request)
     {
@@ -111,8 +96,7 @@ class Adapter implements AdapterInterface
             $rawResponse = $client->query($query);
         } catch (\Exception $e) {
             $this->logger->critical($e);
-            // return empty search result in case an exception is thrown from Elasticsearch
-            $rawResponse = self::$emptyRawResponse;
+            throw new ClientException("Could not perform search query.", $e->getCode(), $e);
         }
 
         $rawDocuments = isset($rawResponse['hits']['hits']) ? $rawResponse['hits']['hits'] : [];
diff --git a/vendor/magento/module-elasticsearch-7/SearchAdapter/Adapter.php b/vendor/magento/module-elasticsearch-7/SearchAdapter/Adapter.php
index bbc7985f451..c79d72415e1 100644
--- a/vendor/magento/module-elasticsearch-7/SearchAdapter/Adapter.php
+++ b/vendor/magento/module-elasticsearch-7/SearchAdapter/Adapter.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2015 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
@@ -15,6 +15,7 @@ use Magento\Elasticsearch\SearchAdapter\ResponseFactory;
 use Psr\Log\LoggerInterface;
 use Magento\Framework\Search\AdapterInterface;
 use Magento\Elasticsearch\SearchAdapter\QueryContainerFactory;
+use Magento\AdvancedSearch\Model\Client\ClientException;
 
 /**
  * Elasticsearch Search Adapter
@@ -50,27 +51,6 @@ class Adapter implements AdapterInterface
      */
     private $queryContainerFactory;
 
-    /**
-     * Empty response from Elasticsearch
-     *
-     * @var array
-     */
-    private static $emptyRawResponse = [
-        "hits" =>
-            [
-                "hits" => []
-            ],
-        "aggregations" =>
-            [
-                "price_bucket" => [],
-                "category_bucket" =>
-                    [
-                        "buckets" => []
-
-                    ]
-            ]
-    ];
-
     /**
      * @var LoggerInterface
      */
@@ -105,6 +85,7 @@ class Adapter implements AdapterInterface
      *
      * @param RequestInterface $request
      * @return QueryResponse
+     * @throws ClientException
      */
     public function query(RequestInterface $request) : QueryResponse
     {
@@ -117,8 +98,7 @@ class Adapter implements AdapterInterface
             $rawResponse = $client->query($query);
         } catch (\Exception $e) {
             $this->logger->critical($e);
-            // return empty search result in case an exception is thrown from Elasticsearch
-            $rawResponse = self::$emptyRawResponse;
+            throw new ClientException("Could not perform search query.", $e->getCode(), $e);
         }
 
         $rawDocuments = $rawResponse['hits']['hits'] ?? [];
diff --git a/vendor/magento/module-open-search/SearchAdapter/Adapter.php b/vendor/magento/module-open-search/SearchAdapter/Adapter.php
index 03fb9977b0d..95d0f177b0a 100644
--- a/vendor/magento/module-open-search/SearchAdapter/Adapter.php
+++ b/vendor/magento/module-open-search/SearchAdapter/Adapter.php
@@ -1,23 +1,28 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2022 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
 namespace Magento\OpenSearch\SearchAdapter;
 
+use Magento\AdvancedSearch\Model\Client\ClientException;
 use Magento\Elasticsearch\SearchAdapter\Aggregation\Builder as AggregationBuilder;
 use Magento\Elasticsearch\SearchAdapter\ConnectionManager;
 use Magento\Elasticsearch\SearchAdapter\QueryContainerFactory;
 use Magento\Elasticsearch\SearchAdapter\ResponseFactory;
 use Magento\Framework\Search\AdapterInterface;
+use Magento\Framework\Search\Request\EmptyRequestDataException;
 use Magento\Framework\Search\RequestInterface;
 use Magento\Framework\Search\Response\QueryResponse;
+use OpenSearch\Common\Exceptions\BadRequest400Exception;
+use OpenSearch\Common\Exceptions\Missing404Exception;
 use Psr\Log\LoggerInterface;
 
 /**
  * OpenSearch Search Adapter
+ * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  */
 class Adapter implements AdapterInterface
 {
@@ -26,49 +31,32 @@ class Adapter implements AdapterInterface
      *
      * @var Mapper
      */
-    private $mapper;
+    private Mapper $mapper;
 
     /**
      * @var ResponseFactory
      */
-    private $responseFactory;
+    private ResponseFactory $responseFactory;
 
     /**
      * @var ConnectionManager
      */
-    private $connectionManager;
+    private ConnectionManager $connectionManager;
 
     /**
      * @var AggregationBuilder
      */
-    private $aggregationBuilder;
+    private AggregationBuilder $aggregationBuilder;
 
     /**
      * @var QueryContainerFactory
      */
-    private $queryContainerFactory;
-
-    /**
-     * Empty response from OpenSearch
-     *
-     * @var array
-     */
-    private static $emptyRawResponse = [
-        'hits' => [
-            'hits' => []
-        ],
-        'aggregations' => [
-            'price_bucket' => [],
-            'category_bucket' => [
-                'buckets' => []
-            ]
-        ]
-    ];
+    private QueryContainerFactory $queryContainerFactory;
 
     /**
      * @var LoggerInterface
      */
-    private $logger;
+    private LoggerInterface $logger;
 
     /**
      * @param ConnectionManager $connectionManager
@@ -109,10 +97,13 @@ class Adapter implements AdapterInterface
 
         try {
             $rawResponse = $client->query($query);
-        } catch (\Exception $e) {
+        } catch (Missing404Exception|BadRequest400Exception $e) {
+            $this->logger->critical($e);
+            throw new EmptyRequestDataException("Could not perform search query.");
+        }
+        catch (\Exception $e) {
             $this->logger->critical($e);
-            // return empty search result in case an exception is thrown from OpenSearch
-            $rawResponse = self::$emptyRawResponse;
+            throw new ClientException("Could not perform search query.", $e->getCode(), $e);
         }
 
         $rawDocuments = $rawResponse['hits']['hits'] ?? [];
diff --git a/vendor/magento/framework/Search/Search.php b/vendor/magento/framework/Search/Search.php
index 1286be59a0d..ca557339970 100644
--- a/vendor/magento/framework/Search/Search.php
+++ b/vendor/magento/framework/Search/Search.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2015 Adobe
+ * All Rights Reserved.
  */
 namespace Magento\Framework\Search;
 
@@ -18,22 +18,22 @@ class Search implements SearchInterface
     /**
      * @var Builder
      */
-    private $requestBuilder;
+    private Builder $requestBuilder;
 
     /**
      * @var ScopeResolverInterface
      */
-    private $scopeResolver;
+    private ScopeResolverInterface $scopeResolver;
 
     /**
      * @var SearchEngineInterface
      */
-    private $searchEngine;
+    private SearchEngineInterface $searchEngine;
 
     /**
      * @var SearchResponseBuilder
      */
-    private $searchResponseBuilder;
+    private SearchResponseBuilder $searchResponseBuilder;
 
     /**
      * @param Builder $requestBuilder
@@ -45,7 +45,7 @@ class Search implements SearchInterface
         Builder $requestBuilder,
         ScopeResolverInterface $scopeResolver,
         SearchEngineInterface $searchEngine,
-        SearchResponseBuilder $searchResponseBuilder
+        SearchResponseBuilder $searchResponseBuilder,
     ) {
         $this->requestBuilder = $requestBuilder;
         $this->scopeResolver = $scopeResolver;
@@ -84,8 +84,10 @@ class Search implements SearchInterface
         $request = $this->requestBuilder->create();
         $searchResponse = $this->searchEngine->search($request);
 
-        return $this->searchResponseBuilder->build($searchResponse)
+        $response = $this->searchResponseBuilder->build($searchResponse)
             ->setSearchCriteria($searchCriteria);
+
+        return $response;
     }
 
     /**
diff --git a/vendor/magento/framework/View/Layout.php b/vendor/magento/framework/View/Layout.php
index eeba7485e04..dcc595c0f5d 100644
--- a/vendor/magento/framework/View/Layout.php
+++ b/vendor/magento/framework/View/Layout.php
@@ -1,7 +1,7 @@
 <?php
 /**
- * Copyright © Magento, Inc. All rights reserved.
- * See COPYING.txt for license details.
+ * Copyright 2011 Adobe
+ * All Rights Reserved.
  */
 declare(strict_types=1);
 
@@ -11,10 +11,16 @@ use Magento\Framework\App\ObjectManager;
 use Magento\Framework\App\State as AppState;
 use Magento\Framework\Cache\FrontendInterface;
 use Magento\Framework\Event\ManagerInterface;
-use Magento\Framework\Exception\LocalizedException;
+use Magento\Framework\App\Response\Http as ResponseHttp;
 use Magento\Framework\Message\ManagerInterface as MessageManagerInterface;
 use Magento\Framework\Serialize\SerializerInterface;
+use Magento\Framework\View\Design\Theme\ResolverInterface;
+use Magento\Framework\View\Layout\Data\Structure;
 use Magento\Framework\View\Layout\Element;
+use Magento\Framework\View\Layout\GeneratorPool;
+use Magento\Framework\View\Layout\ProcessorFactory;
+use Magento\Framework\View\Layout\Reader\ContextFactory;
+use Magento\Framework\View\Layout\ReaderPool;
 use Psr\Log\LoggerInterface as Logger;
 
 /**
@@ -33,7 +39,7 @@ class Layout extends \Magento\Framework\Simplexml\Config implements \Magento\Fra
     /**
      * Empty layout xml
      */
-    const LAYOUT_NODE = '<layout/>';
+    public const LAYOUT_NODE = '<layout/>';
 
     /**
      * Default cache life time
@@ -183,21 +189,27 @@ class Layout extends \Magento\Framework\Simplexml\Config implements \Magento\Fra
     private $cacheLifetime;
 
     /**
-     * @param Layout\ProcessorFactory $processorFactory
+     * @var ResponseHttp
+     */
+    private ResponseHttp $response;
+
+    /**
+     * @param ProcessorFactory $processorFactory
      * @param ManagerInterface $eventManager
-     * @param Layout\Data\Structure $structure
+     * @param Structure $structure
      * @param MessageManagerInterface $messageManager
-     * @param Design\Theme\ResolverInterface $themeResolver
-     * @param Layout\ReaderPool $readerPool
-     * @param Layout\GeneratorPool $generatorPool
+     * @param ResolverInterface $themeResolver
+     * @param ReaderPool $readerPool
+     * @param GeneratorPool $generatorPool
      * @param FrontendInterface $cache
-     * @param Layout\Reader\ContextFactory $readerContextFactory
+     * @param ContextFactory $readerContextFactory
      * @param Layout\Generator\ContextFactory $generatorContextFactory
-     * @param \Magento\Framework\App\State $appState
-     * @param \Psr\Log\LoggerInterface $logger
+     * @param State $appState
+     * @param LoggerInterface $logger
      * @param bool $cacheable
      * @param SerializerInterface|null $serializer
      * @param int|null $cacheLifetime
+     * @param ResponseHttp|null $response
      */
     public function __construct(
         Layout\ProcessorFactory $processorFactory,
@@ -214,12 +226,14 @@ class Layout extends \Magento\Framework\Simplexml\Config implements \Magento\Fra
         Logger $logger,
         $cacheable = true,
         SerializerInterface $serializer = null,
-        ?int $cacheLifetime = null
+        ?int $cacheLifetime = null,
+        ?ResponseHttp $response = null
     ) {
         $this->_elementClass = \Magento\Framework\View\Layout\Element::class;
         $this->_renderingOutput = new \Magento\Framework\DataObject();
         $this->serializer = $serializer ?: ObjectManager::getInstance()->get(SerializerInterface::class);
 
+        $this->response = $response ?: ObjectManager::getInstance()->get(ResponseHttp::class);
         $this->_processorFactory = $processorFactory;
         $this->_eventManager = $eventManager;
         $this->structure = $structure;
@@ -557,6 +571,7 @@ class Layout extends \Magento\Framework\Simplexml\Config implements \Magento\Fra
                 $result = $this->_renderContainer($name, false);
             }
         } catch (\Exception $e) {
+            $this->response->setNoCacheHeaders();
             if ($this->appState->getMode() === AppState::MODE_DEVELOPER) {
                 throw $e;
             }
