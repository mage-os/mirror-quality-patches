diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product.php b/vendor/magento/module-catalog-import-export/Model/Import/Product.php
index 6d66d58af55d..5a8ec4ee41ac 100644
--- a/vendor/magento/module-catalog-import-export/Model/Import/Product.php
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product.php
@@ -13,9 +13,11 @@
 use Magento\CatalogImportExport\Model\Import\Product\LinkProcessor;
 use Magento\CatalogImportExport\Model\Import\Product\MediaGalleryProcessor;
 use Magento\CatalogImportExport\Model\Import\Product\RowValidatorInterface as ValidatorInterface;
+use Magento\CatalogImportExport\Model\Import\Product\SkuStorage;
 use Magento\CatalogImportExport\Model\Import\Product\StatusProcessor;
 use Magento\CatalogImportExport\Model\Import\Product\StockProcessor;
 use Magento\CatalogImportExport\Model\StockItemImporterInterface;
+use Magento\CatalogImportExport\Model\StockItemProcessorInterface;
 use Magento\CatalogInventory\Api\Data\StockItemInterface;
 use Magento\Framework\App\Filesystem\DirectoryList;
 use Magento\Framework\App\ObjectManager;
@@ -229,7 +231,6 @@ class Product extends AbstractEntity
      *
      * @deprecated 101.1.0 use DI for LinkProcessor class if you want to add additional types
      * @see LinkProcessor::fetchProductLinks
-     *
      * @var array
      */
     protected $_linkNameToId = [
@@ -755,6 +756,16 @@ class Product extends AbstractEntity
      */
     private $linkProcessor;
 
+    /**
+     * @var StockItemProcessorInterface
+     */
+    private $stockItemProcessor;
+
+    /**
+     * @var SkuStorage|null
+     */
+    private ?SkuStorage $skuStorage;
+
     /**
      * @param \Magento\Framework\Json\Helper\Data $jsonHelper
      * @param \Magento\ImportExport\Helper\Data $importExportData
@@ -804,6 +815,8 @@ class Product extends AbstractEntity
      * @param StockProcessor|null $stockProcessor
      * @param LinkProcessor|null $linkProcessor
      * @param File|null $fileDriver
+     * @param StockItemProcessorInterface|null $stockItemProcessor
+     * @param SkuStorage|null $skuStorage
      * @throws LocalizedException
      * @throws \Magento\Framework\Exception\FileSystemException
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ -858,7 +871,9 @@ public function __construct(
         StatusProcessor $statusProcessor = null,
         StockProcessor $stockProcessor = null,
         LinkProcessor $linkProcessor = null,
-        ?File $fileDriver = null
+        ?File $fileDriver = null,
+        ?StockItemProcessorInterface $stockItemProcessor = null,
+        ?SkuStorage $skuStorage = null
     ) {
         $this->_eventManager = $eventManager;
         $this->stockRegistry = $stockRegistry;
@@ -914,6 +929,8 @@ public function __construct(
         );
         $this->_optionEntity = $data['option_entity'] ??
             $optionFactory->create(['data' => ['product_entity' => $this]]);
+        $this->skuStorage = $skuStorage ?? ObjectManager::getInstance()
+            ->get(SkuStorage::class);
         $this->_initAttributeSets()
             ->_initTypeModels()
             ->_initSkus()
@@ -922,6 +939,8 @@ public function __construct(
         $this->dateTimeFactory = $dateTimeFactory ?? ObjectManager::getInstance()->get(DateTimeFactory::class);
         $this->productRepository = $productRepository ?? ObjectManager::getInstance()
                 ->get(ProductRepositoryInterface::class);
+        $this->stockItemProcessor = $stockItemProcessor ?? ObjectManager::getInstance()
+            ->get(StockItemProcessorInterface::class);
     }
 
     /**
@@ -1123,7 +1142,7 @@ protected function _importData()
     protected function _replaceProducts()
     {
         $this->deleteProductsForReplacement();
-        $this->_oldSku = $this->skuProcessor->reloadOldSkus()->getOldSkus();
+        $this->skuStorage->reset();
         $this->_validatedRows = null;
         $this->setParameters(
             array_merge(
@@ -1180,7 +1199,7 @@ protected function _initAttributeSets()
     protected function _initSkus()
     {
         $this->skuProcessor->setTypeModels($this->_productTypeModels);
-        $this->_oldSku = $this->skuProcessor->reloadOldSkus()->getOldSkus();
+        $this->skuStorage->reset();
         return $this;
     }
 
@@ -1308,7 +1327,7 @@ protected function _saveProductAttributes(array $attributesData)
             $linkIdBySkuForStatusChanged = [];
             $tableData = [];
             foreach ($skuData as $sku => $attributes) {
-                $linkId = $this->_oldSku[strtolower($sku)][$linkField];
+                $linkId = $this->skuStorage->get((string)$sku)[$linkField];
                 foreach ($attributes as $attributeId => $storeValues) {
                     foreach ($storeValues as $storeId => $storeValue) {
                         if ($attributeId === $statusAttributeId) {
@@ -1434,7 +1453,7 @@ public function saveProductEntity(array $entityRowsIn, array $entityRowsUp)
                 }
             }
 
-            $this->updateOldSku($newProducts);
+            $this->updateSkuStorage($newProducts);
         }
 
         return $this;
@@ -1456,22 +1475,11 @@ private function getOldSkuFieldsForSelect()
      * @param array $newProducts
      * @return void
      */
-    private function updateOldSku(array $newProducts)
+    private function updateSkuStorage(array $newProducts): void
     {
-        $oldSkus = [];
         foreach ($newProducts as $info) {
-            $typeId = $info['type_id'];
-            $sku = strtolower($info['sku']);
-            $oldSkus[$sku] = [
-                'type_id' => $typeId,
-                'attr_set_id' => $info['attribute_set_id'],
-                $this->getProductIdentifierField() => $info[$this->getProductIdentifierField()],
-                'supported_type' => isset($this->_productTypeModels[$typeId]),
-                $this->getProductEntityLinkField() => $info[$this->getProductEntityLinkField()],
-            ];
+            $this->skuStorage->set($info);
         }
-
-        $this->_oldSku = array_replace($this->_oldSku, $oldSkus);
     }
 
     /**
@@ -2333,6 +2341,7 @@ protected function _saveStockItem()
     {
         while ($bunch = $this->_dataSourceModel->getNextBunch()) {
             $stockData = [];
+            $importedData = [];
             $productIdsToReindex = [];
             $stockChangedProductIds = [];
             // Format bunch to stock data rows
@@ -2358,12 +2367,13 @@ protected function _saveStockItem()
 
                 if (!isset($stockData[$sku])) {
                     $stockData[$sku] = $row;
+                    $importedData[$sku] = $rowData;
                 }
             }
 
             // Insert rows
             if (!empty($stockData)) {
-                $this->stockItemImporter->import($stockData);
+                $this->stockItemProcessor->process($stockData, $importedData);
             }
 
             $this->reindexStockStatus($stockChangedProductIds);
@@ -2478,10 +2488,19 @@ public function getNextBunch()
      * new products with the same SKU in different letter cases.
      *
      * @return array
+     * @deprecated This method is deprecated due to high memory consumption.
+     * @see SkuStorage
      */
     public function getOldSku()
     {
-        return $this->_oldSku;
+        // For backward compatibility get all data from storage
+        $oldSkus = [];
+        foreach ($this->skuStorage->iterate() as $sku => $value) {
+            $oldSkus[$sku] = $value;
+            $oldSkus[$sku]['supported_type'] = isset($this->_productTypeModels[$value['type_id']]);
+        }
+
+        return $oldSkus;
     }
 
     /**
@@ -3129,8 +3148,7 @@ private function parseMultipleValues($labelRow)
     private function isSkuExist($sku)
     {
         if ($sku !== null) {
-            $sku = strtolower($sku);
-            return isset($this->_oldSku[$sku]);
+            return $this->skuStorage->has($sku);
         }
         return false;
     }
@@ -3143,7 +3161,7 @@ private function isSkuExist($sku)
      */
     private function getExistingSku($sku)
     {
-        return $this->_oldSku[strtolower($sku)];
+        return $this->skuStorage->get((string)$sku);
     }
 
     /**
diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product/LinkProcessor.php b/vendor/magento/module-catalog-import-export/Model/Import/Product/LinkProcessor.php
index f8633a85afa6..9391df331c84 100644
--- a/vendor/magento/module-catalog-import-export/Model/Import/Product/LinkProcessor.php
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product/LinkProcessor.php
@@ -46,6 +46,11 @@ class LinkProcessor
      */
     private $logger;
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * LinkProcessor constructor.
      *
@@ -54,13 +59,15 @@ class LinkProcessor
      * @param SkuProcessor $skuProcessor
      * @param LoggerInterface $logger
      * @param array $linkNameToId
+     * @param SkuStorage $skuStorage
      */
     public function __construct(
         LinkFactory $linkFactory,
         Helper $resourceHelper,
         SkuProcessor $skuProcessor,
         LoggerInterface $logger,
-        array $linkNameToId
+        array $linkNameToId,
+        SkuStorage $skuStorage
     ) {
         $this->linkFactory = $linkFactory;
         $this->resourceHelper = $resourceHelper;
@@ -68,6 +75,7 @@ public function __construct(
         $this->logger = $logger;
 
         $this->linkNameToId = $linkNameToId;
+        $this->skuStorage = $skuStorage;
     }
 
     /**
@@ -168,10 +176,10 @@ private function processLinkBunches(
                     ? explode($importEntity->getMultipleValueSeparator(), $rowData[$linkName . 'position'])
                     : [];
 
-                $linkSkus = $this->filterValidLinks($importEntity, $sku, $linkSkus);
+                $linkSkus = $this->filterValidLinks($sku, $linkSkus);
 
                 foreach ($linkSkus as $linkedKey => $linkedSku) {
-                    $linkedId = $this->getProductLinkedId($importEntity, $linkedSku);
+                    $linkedId = $this->getProductLinkedId($linkedSku);
                     if ($linkedId == null) {
                         // Import file links to a SKU which is skipped for some reason, which leads to a "NULL"
                         // link causing fatal errors.
@@ -219,7 +227,7 @@ private function deleteProductsLinks(
         Product $importEntity,
         Link $resource,
         array $linksToDelete
-    ) {
+    ): void {
         if (!empty($linksToDelete) && Import::BEHAVIOR_APPEND === $importEntity->getBehavior()) {
             foreach ($linksToDelete as $linkTypeId => $productIds) {
                 if (!empty($productIds)) {
@@ -240,27 +248,23 @@ private function deleteProductsLinks(
     /**
      * Check if product exists for specified SKU
      *
-     * @param Product $importEntity
      * @param string $sku
      * @return bool
      */
-    private function isSkuExist(Product $importEntity, string $sku): bool
+    private function isSkuExist(string $sku): bool
     {
-        $sku = strtolower($sku);
-        return isset($importEntity->getOldSku()[$sku]);
+        return $this->skuStorage->has($sku);
     }
 
     /**
      * Get existing SKU record
      *
-     * @param Product $importEntity
      * @param string $sku
-     * @return mixed
+     * @return array|null
      */
-    private function getExistingSku(Product $importEntity, string $sku)
+    private function getExistingSku(string $sku): ?array
     {
-        $sku = strtolower($sku);
-        return $importEntity->getOldSku()[$sku];
+        return $this->skuStorage->get($sku);
     }
 
     /**
@@ -293,20 +297,17 @@ private function fetchProductLinks(Product $importEntity, Link $resource, int $p
     /**
      * Gets the Id of the Sku
      *
-     * @param Product $importEntity
      * @param string $linkedSku
      * @return int|null
      */
-    private function getProductLinkedId(Product $importEntity, string $linkedSku): ?int
+    private function getProductLinkedId(string $linkedSku): ?int
     {
         $linkedSku = trim($linkedSku);
         $newSku = $this->skuProcessor->getNewSku($linkedSku);
 
-        $linkedId = ! empty($newSku) ?
+        return !empty($newSku) ?
             $newSku['entity_id'] :
-            $this->getExistingSku($importEntity, $linkedSku)['entity_id'];
-
-        return $linkedId;
+            $this->getExistingSku($linkedSku)['entity_id'];
     }
 
     /**
@@ -326,7 +327,7 @@ private function saveLinksData(
         array $productIds,
         array $linkRows,
         array $positionRows
-    ) {
+    ): void {
         $mainTable = $resource->getMainTable();
         if (Import::BEHAVIOR_APPEND != $importEntity->getBehavior() && $productIds) {
             $importEntity->getConnection()->delete(
@@ -367,7 +368,7 @@ private function composeLinkKey(int $productId, int $linkedId, int $linkTypeId):
      * @param array $rowData
      * @return array
      */
-    private function filterProvidedLinkTypes(array $rowData)
+    private function filterProvidedLinkTypes(array $rowData): array
     {
         return array_filter(
             $this->linkNameToId,
@@ -381,21 +382,20 @@ function ($linkName) use ($rowData) {
     /**
      * Filter out invalid links
      *
-     * @param Product $importEntity
      * @param string $sku
      * @param array $linkSkus
      * @return array
      */
-    private function filterValidLinks(Product $importEntity, string $sku, array $linkSkus)
+    private function filterValidLinks(string $sku, array $linkSkus): array
     {
         return array_filter(
             $linkSkus,
-            function ($linkedSku) use ($sku, $importEntity) {
+            function ($linkedSku) use ($sku) {
                 $linkedSku = $linkedSku !== null ? trim($linkedSku) : '';
 
                 return (
                         $this->skuProcessor->getNewSku($linkedSku) !== null
-                        || $this->isSkuExist($importEntity, $linkedSku)
+                        || $this->isSkuExist($linkedSku)
                     )
                     && strcasecmp($linkedSku, $sku) !== 0;
             }
diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product/Option.php b/vendor/magento/module-catalog-import-export/Model/Import/Product/Option.php
index f13b1a640c2a..4cbd8ff86036 100644
--- a/vendor/magento/module-catalog-import-export/Model/Import/Product/Option.php
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product/Option.php
@@ -10,6 +10,7 @@
 use Magento\Catalog\Model\ResourceModel\Product\Option\Value\Collection as ProductOptionValueCollection;
 use Magento\Catalog\Model\ResourceModel\Product\Option\Value\CollectionFactory as ProductOptionValueCollectionFactory;
 use Magento\CatalogImportExport\Model\Import\Product;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\App\ResourceConnection;
 use Magento\ImportExport\Model\Import;
 use Magento\ImportExport\Model\Import\ErrorProcessing\ProcessingErrorAggregatorInterface;
@@ -102,6 +103,11 @@ class Option extends \Magento\ImportExport\Model\Import\Entity\AbstractEntity
      */
     protected $_productsSkuToId = [];
 
+    /**
+     * @var bool
+     */
+    private $resetProductsSkus = true;
+
     /**
      * Instance of import/export resource helper
      *
@@ -318,11 +324,6 @@ class Option extends \Magento\ImportExport\Model\Import\Entity\AbstractEntity
      */
     private $productEntityLinkField;
 
-    /**
-     * @var string
-     */
-    private $productEntityIdentifierField;
-
     /**
      * @var ProductOptionValueCollectionFactory
      */
@@ -352,6 +353,7 @@ class Option extends \Magento\ImportExport\Model\Import\Entity\AbstractEntity
      * @param ProcessingErrorAggregatorInterface $errorAggregator
      * @param array $data
      * @param ProductOptionValueCollectionFactory $productOptionValueCollectionFactory
+     * @param SkuStorage|null $skuStorage
      * @throws \Magento\Framework\Exception\LocalizedException
      *
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
@@ -369,7 +371,8 @@ public function __construct(
         \Magento\Framework\Stdlib\DateTime\TimezoneInterface $dateTime,
         ProcessingErrorAggregatorInterface $errorAggregator,
         array $data = [],
-        ProductOptionValueCollectionFactory $productOptionValueCollectionFactory = null
+        ProductOptionValueCollectionFactory $productOptionValueCollectionFactory = null,
+        ?SkuStorage $skuStorage = null
     ) {
         $this->_resource = $resource;
         $this->_catalogData = $catalogData;
@@ -409,6 +412,8 @@ public function __construct(
         }
 
         $this->errorAggregator = $errorAggregator;
+        $this->skuStorage = $skuStorage ?? ObjectManager::getInstance()
+            ->get(SkuStorage::class);
 
         $this->_initSourceEntities($data)->_initTables($data)->_initStores($data);
 
@@ -417,6 +422,11 @@ public function __construct(
         $this->_initProductsSku();
     }
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * Initialization of error message templates
      *
@@ -897,9 +907,9 @@ protected function _saveNewOptionData(array $rowData, $rowNumber)
         } else {
             $storeId = Store::DEFAULT_STORE_ID;
         }
-        if (isset($this->_productsSkuToId[$this->_rowProductSku])) {
+        if ($this->_rowProductSku && $this->skuStorage->has($this->_rowProductSku)) {
             // save in existing data array
-            $productId = $this->_productsSkuToId[$this->_rowProductSku];
+            $productId = $this->skuStorage->get($this->_rowProductSku)[$this->getProductEntityLinkField()];
             if (!isset($this->_newOptionsOldData[$productId])) {
                 $this->_newOptionsOldData[$productId] = [];
             }
@@ -916,26 +926,39 @@ protected function _saveNewOptionData(array $rowData, $rowNumber)
             // set row number
             $this->_newOptionsOldData[$productId][$this->_newCustomOptionId]['rows'][] = $rowNumber;
         } else {
-            // save in new data array
-            $productSku = $this->_rowProductSku;
-            if (!isset($this->_newOptionsNewData[$this->_rowProductSku])) {
-                $this->_newOptionsNewData[$this->_rowProductSku] = [];
-            }
-            if (!isset($this->_newOptionsNewData[$productSku][$this->_newCustomOptionId])) {
-                $this->_newOptionsNewData[$productSku][$this->_newCustomOptionId] = [
-                    'titles' => [],
-                    'rows' => [],
-                    'type' => $rowData[self::COLUMN_TYPE],
-                ];
-            }
-            // set title
-            $this->_newOptionsNewData[$productSku][$this
-                ->_newCustomOptionId]['titles'][$storeId] = $rowData[self::COLUMN_TITLE];
-            // set row number
-            $this->_newOptionsNewData[$productSku][$this->_newCustomOptionId]['rows'][] = $rowNumber;
+            $this->saveInNewDataArray($rowData, $rowNumber, $storeId);
         }
     }
 
+    /**
+     * Save option data in array for non-existing new product
+     *
+     * @param array $rowData
+     * @param int $rowNumber
+     * @param int $storeId
+     * @return void
+     */
+    private function saveInNewDataArray(array $rowData, $rowNumber, $storeId): void
+    {
+        // save in new data array
+        $productSku = $this->_rowProductSku;
+        if (!isset($this->_newOptionsNewData[$productSku])) {
+            $this->_newOptionsNewData[$productSku] = [];
+        }
+        if (!isset($this->_newOptionsNewData[$productSku][$this->_newCustomOptionId])) {
+            $this->_newOptionsNewData[$productSku][$this->_newCustomOptionId] = [
+                'titles' => [],
+                'rows' => [],
+                'type' => $rowData[self::COLUMN_TYPE],
+            ];
+        }
+        // set title
+        $this->_newOptionsNewData[$productSku][$this
+            ->_newCustomOptionId]['titles'][$storeId] = $rowData[self::COLUMN_TITLE];
+        // set row number
+        $this->_newOptionsNewData[$productSku][$this->_newCustomOptionId]['rows'][] = $rowNumber;
+    }
+
     /**
      * Validate secondary custom option row
      *
@@ -957,8 +980,8 @@ protected function _validateSecondaryRow(array $rowData, $rowNumber)
         } elseif (!empty($rowData[self::COLUMN_ROW_SORT]) && !ctype_digit((string)$rowData[self::COLUMN_ROW_SORT])) {
             $this->_productEntity->addRowError(self::ERROR_INVALID_ROW_SORT, $rowNumber);
         } else {
-            if (isset($this->_productsSkuToId[$this->_rowProductSku])) {
-                $productId = $this->_productsSkuToId[$this->_rowProductSku];
+            if ($this->_rowProductSku && $this->skuStorage->has($this->_rowProductSku)) {
+                $productId = $this->skuStorage->get($this->_rowProductSku)[$this->getProductEntityLinkField()];
                 $this->_newOptionsOldData[$productId][$this->_newCustomOptionId]['rows'][] = $rowNumber;
             } else {
                 $productSku = $this->_rowProductSku;
@@ -1277,8 +1300,9 @@ protected function _importData()
                 $optionId = $nextOptionId;
                 $valueId = $nextValueId;
                 $multiRowData = $this->_getMultiRowFormat($rowData);
-                if (!empty($rowData[self::COLUMN_SKU]) && isset($this->_productsSkuToId[$rowData[self::COLUMN_SKU]])) {
-                    $this->_rowProductId = $this->_productsSkuToId[$rowData[self::COLUMN_SKU]];
+                if (!empty($rowData[self::COLUMN_SKU]) && $this->skuStorage->has($rowData[self::COLUMN_SKU])) {
+                    $productData = $this->skuStorage->get($rowData[self::COLUMN_SKU]);
+                    $this->_rowProductId = $productData[$this->getProductEntityLinkField()];
                     if (array_key_exists('custom_options', $rowData)
                         && (
                             $rowData['custom_options'] === null ||
@@ -1436,14 +1460,9 @@ private function removeExistingOptions(array $products, array $optionsToRemove):
      */
     protected function _initProductsSku()
     {
-        if (!$this->_productsSkuToId || !empty($this->_newOptionsNewData)) {
-            $columns = ['entity_id', 'sku'];
-            if ($this->getProductEntityLinkField() != $this->getProductIdentifierField()) {
-                $columns[] = $this->getProductEntityLinkField();
-            }
-            foreach ($this->_productModel->getProductEntitiesInfo($columns) as $product) {
-                $this->_productsSkuToId[$product['sku']] = $product[$this->getProductEntityLinkField()];
-            }
+        if ($this->resetProductsSkus || !empty($this->_newOptionsNewData)) {
+            $this->skuStorage->reset();
+            $this->resetProductsSkus = false;
         }
 
         return $this;
@@ -2124,6 +2143,7 @@ protected function _parseCustomOptions($rowData)
     public function clearProductsSkuToId()
     {
         $this->_productsSkuToId = null;
+        $this->resetProductsSkus = true;
         return $this;
     }
 
@@ -2142,21 +2162,6 @@ private function getProductEntityLinkField()
         return $this->productEntityLinkField;
     }
 
-    /**
-     * Get product entity identifier field
-     *
-     * @return string
-     */
-    private function getProductIdentifierField()
-    {
-        if (!$this->productEntityIdentifierField) {
-            $this->productEntityIdentifierField = $this->getMetadataPool()
-                ->getMetadata(ProductInterface::class)
-                ->getIdentifierField();
-        }
-        return $this->productEntityIdentifierField;
-    }
-
     /**
      * Save prepared custom options.
      *
diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product/SkuStorage.php b/vendor/magento/module-catalog-import-export/Model/Import/Product/SkuStorage.php
new file mode 100644
index 000000000000..539085737f43
--- /dev/null
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product/SkuStorage.php
@@ -0,0 +1,217 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+declare(strict_types=1);
+
+namespace Magento\CatalogImportExport\Model\Import\Product;
+
+use Magento\Catalog\Api\Data\ProductInterface;
+use Magento\CatalogImportExport\Model\ResourceModel\ProductDataLoader;
+use Magento\Framework\EntityManager\MetadataPool;
+
+/**
+ * Service loads all the SKUs from DB along with ids, attribute sets, types and stores it in memory efficient way
+ */
+class SkuStorage
+{
+    private const DELIMITER = '|';
+
+    /**
+     * @var MetadataPool
+     */
+    private MetadataPool $metadataPool;
+
+    /**
+     * @var array|null
+     */
+    private ?array $rows = null;
+
+    /**
+     * @var array
+     */
+    private array $typeIdMap = [];
+
+    /**
+     * @var array
+     */
+    private array $typeIdIndex = [];
+
+    /**
+     * @var string|null
+     */
+    private ?string $productEntityLinkField = null;
+
+    /**
+     * @var ProductDataLoader
+     */
+    private ProductDataLoader $productDataLoader;
+
+    /**
+     * @param MetadataPool $metadataPool
+     * @param ProductDataLoader $productDataLoader
+     */
+    public function __construct(
+        MetadataPool $metadataPool,
+        ProductDataLoader $productDataLoader
+    ) {
+        $this->metadataPool = $metadataPool;
+        $this->productDataLoader = $productDataLoader;
+    }
+
+    /**
+     * Get product data by its SKU. SKU must be in lowercase
+     *
+     * @param string $key SKU
+     * @return array|null
+     */
+    public function get(string $key): ?array
+    {
+        $this->init();
+        if (!$this->has($key)) {
+            return null;
+        }
+        $key = strtolower($key);
+
+        return $this->unserialize($this->rows[$key]);
+    }
+
+    /**
+     * Returns generator to iterate all the values in the storage
+     *
+     * @return \Generator
+     */
+    public function iterate(): \Generator
+    {
+        $this->init();
+        foreach ($this->rows as $sku => $data) {
+            yield $sku => $this->unserialize($data);
+        }
+    }
+
+    /**
+     * Checks does SKU exist in the list. SKU must be in lowercase
+     *
+     * @param string $key
+     * @return bool
+     */
+    public function has(string $key): bool
+    {
+        $this->init();
+        $key = strtolower($key);
+        return isset($this->rows[$key]);
+    }
+
+    /**
+     * Set product data to the list/update existing data
+     *
+     * @param array $data
+     * @return void
+     */
+    public function set(array $data): void
+    {
+        $this->init();
+        $this->rows[strtolower($data['sku'])] = implode(self::DELIMITER, [
+            $data['entity_id'],
+            $data[$this->getProductEntityLinkField()],
+            $this->maskTypeId($data['type_id']),
+            $data['attribute_set_id']
+        ]);
+    }
+
+    /**
+     * Completely resets the sku storage
+     *
+     * @return void
+     */
+    public function reset(): void
+    {
+        $this->rows = null;
+        $this->init();
+    }
+
+    /**
+     * Initialises sku list
+     *
+     * @return void
+     */
+    private function init(): void
+    {
+        if ($this->rows !== null) {
+            return;
+        }
+        $this->rows = [];
+
+        $productMetadata = $this->metadataPool->getMetadata(ProductInterface::class);
+
+        $linkedField = $this->getProductEntityLinkField();
+        $columns = ['entity_id', 'type_id', 'attribute_set_id', 'sku'];
+        if ($linkedField != $productMetadata->getIdentifierField()) {
+            $columns[] = $linkedField;
+        }
+
+        foreach ($this->productDataLoader->getProductsData($columns) as $row) {
+            $this->set($row);
+        }
+    }
+
+    /**
+     * Replaces string representation of product type with generated int ID
+     *
+     * @param string $typeIdString
+     * @return int
+     */
+    private function maskTypeId(string $typeIdString): int
+    {
+        if (!isset($this->typeIdMap[$typeIdString])) {
+            $this->typeIdIndex[] = $typeIdString;
+            $this->typeIdMap[$typeIdString] = count($this->typeIdIndex) - 1;
+        }
+
+        return $this->typeIdMap[$typeIdString];
+    }
+
+    /**
+     * Restores string representation of product type by their generated ID
+     *
+     * @param int $typeIdInt
+     * @return string
+     */
+    private function unmaskTypeId(int $typeIdInt): string
+    {
+        return $this->typeIdIndex[$typeIdInt];
+    }
+
+    /**
+     * Get product entity link field
+     *
+     * @return string
+     */
+    private function getProductEntityLinkField(): string
+    {
+        if (!$this->productEntityLinkField) {
+            $this->productEntityLinkField = $this->metadataPool->getMetadata(ProductInterface::class)->getLinkField();
+        }
+        return $this->productEntityLinkField;
+    }
+
+    /**
+     * Convert serialized string into array with end values
+     *
+     * @param string $data
+     * @return array
+     */
+    private function unserialize(string $data): array
+    {
+        $data = explode(self::DELIMITER, $data);
+
+        return [
+            'entity_id' => $data[0],
+            $this->getProductEntityLinkField() => $data[1],
+            'type_id' => $this->unmaskTypeId((int)$data[2]),
+            'attr_set_id' => $data[3]
+        ];
+    }
+}
diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product/UniqueAttributeValidator.php b/vendor/magento/module-catalog-import-export/Model/Import/Product/UniqueAttributeValidator.php
new file mode 100644
index 000000000000..0eff279b8f4e
--- /dev/null
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product/UniqueAttributeValidator.php
@@ -0,0 +1,110 @@
+<?php
+/************************************************************************
+ *
+ * Copyright 2024 Adobe
+ * All Rights Reserved.
+ *
+ * NOTICE: All information contained herein is, and remains
+ * the property of Adobe and its suppliers, if any. The intellectual
+ * and technical concepts contained herein are proprietary to Adobe
+ * and its suppliers and are protected by all applicable intellectual
+ * property laws, including trade secret and copyright laws.
+ * Dissemination of this information or reproduction of this material
+ * is strictly forbidden unless prior written permission is obtained
+ * from Adobe.
+ * ************************************************************************
+ */
+declare(strict_types=1);
+
+namespace Magento\CatalogImportExport\Model\Import\Product;
+
+use Magento\Catalog\Api\Data\ProductInterface;
+use Magento\CatalogImportExport\Model\Import\Product;
+use Magento\Eav\Model\Entity\Attribute\AbstractAttribute;
+use Magento\Framework\EntityManager\MetadataPool;
+use Magento\Framework\Exception\LocalizedException;
+
+class UniqueAttributeValidator
+{
+    /**
+     * @var array
+     */
+    private array $cache = [];
+
+    /**
+     * @param MetadataPool $metadataPool
+     * @param SkuStorage $skuStorage
+     */
+    public function __construct(
+        private readonly MetadataPool $metadataPool,
+        private readonly SkuStorage $skuStorage
+    ) {
+    }
+
+    /**
+     * Check if provided value is unique for the attribute
+     *
+     * @param Product $context
+     * @param string $attributeCode
+     * @param string $sku
+     * @param string $value
+     * @return bool
+     * @throws \Exception
+     */
+    public function isValid(Product $context, string $attributeCode, string $sku, string $value): bool
+    {
+        $cacheKey = strtolower($attributeCode);
+        if (!isset($this->cache[$cacheKey])) {
+            $this->cache[$cacheKey] = $this->load($context, $attributeCode);
+        }
+        $entityData = $this->skuStorage->get($sku);
+        $id = null;
+        if ($entityData !== null) {
+            $id = $entityData[$this->metadataPool->getMetadata(ProductInterface::class)->getLinkField()];
+        }
+        return !isset($this->cache[$cacheKey][$value]) || in_array($id, $this->cache[$cacheKey][$value]);
+    }
+
+    /**
+     * Load attribute values with corresponding entity ids
+     *
+     * @param Product $context
+     * @param string $attributeCode
+     * @return array
+     * @throws LocalizedException
+     */
+    private function load(Product $context, string $attributeCode): array
+    {
+        /** @var AbstractAttribute $attributeObject */
+        $attributeObject = $context->retrieveAttributeByCode($attributeCode);
+        if ($attributeObject->isStatic()) {
+            return [];
+        }
+        $metadata = $this->metadataPool->getMetadata(ProductInterface::class);
+        $connection = $context->getConnection();
+        $idField = $metadata->getLinkField();
+        $select = $connection->select()
+            ->from(
+                $attributeObject->getBackend()->getTable(),
+                ['value', $idField]
+            )
+            ->where(
+                'attribute_id = :attribute_id'
+            );
+        $result = [];
+        foreach ($connection->fetchAll($select, ['attribute_id' => $attributeObject->getId()]) as $row) {
+            $result[$row['value']][] = $row[$idField];
+        }
+        return $result;
+    }
+
+    /**
+     * Clear cached attribute values
+     *
+     * @return void
+     */
+    public function clearCache(): void
+    {
+        $this->cache = [];
+    }
+}
diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator.php b/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator.php
index e425f3c88f4c..30ea59d691c6 100644
--- a/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator.php
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator.php
@@ -6,6 +6,7 @@
 namespace Magento\CatalogImportExport\Model\Import\Product;
 
 use Magento\CatalogImportExport\Model\Import\Product;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\Validator\AbstractValidator;
 use Magento\Catalog\Model\Product\Attribute\Backend\Sku;
 
@@ -48,16 +49,25 @@ class Validator extends AbstractValidator implements RowValidatorInterface
      */
     protected $invalidAttribute;
 
+    /**
+     * @var UniqueAttributeValidator
+     */
+    private $uniqueAttributeValidator;
+
     /**
      * @param \Magento\Framework\Stdlib\StringUtils $string
      * @param RowValidatorInterface[] $validators
+     * @param UniqueAttributeValidator|null $uniqueAttributeValidator
      */
     public function __construct(
         \Magento\Framework\Stdlib\StringUtils $string,
-        $validators = []
+        $validators = [],
+        UniqueAttributeValidator $uniqueAttributeValidator = null
     ) {
         $this->string = $string;
         $this->validators = $validators;
+        $this->uniqueAttributeValidator = $uniqueAttributeValidator
+            ?? ObjectManager::getInstance()->get(UniqueAttributeValidator::class);
     }
 
     /**
@@ -256,7 +266,14 @@ public function isAttributeValid($attrCode, array $attrParams, array $rowData)
 
         if ($valid && !empty($attrParams['is_unique'])) {
             if (isset($this->_uniqueAttributes[$attrCode][$rowData[$attrCode]])
-                && ($this->_uniqueAttributes[$attrCode][$rowData[$attrCode]] != $rowData[Product::COL_SKU])) {
+                && ($this->_uniqueAttributes[$attrCode][$rowData[$attrCode]] != $rowData[Product::COL_SKU])
+                || !$this->uniqueAttributeValidator->isValid(
+                    $this->context,
+                    (string) $attrCode,
+                    (string) $rowData[Product::COL_SKU],
+                    (string) $rowData[$attrCode]
+                )
+            ) {
                 $this->_addMessages([RowValidatorInterface::ERROR_DUPLICATE_UNIQUE_ATTRIBUTE]);
                 return false;
             }
@@ -386,6 +403,8 @@ private function isCategoriesValid(string $value) : bool
      */
     public function init($context)
     {
+        $this->_uniqueAttributes = [];
+        $this->uniqueAttributeValidator->clearCache();
         $this->context = $context;
         foreach ($this->validators as $validator) {
             $validator->init($context);
@@ -393,4 +412,14 @@ public function init($context)
 
         return $this;
     }
+
+    /**
+     * @inheritdoc
+     */
+    public function _resetState(): void
+    {
+        $this->_uniqueAttributes = [];
+        $this->uniqueAttributeValidator->clearCache();
+        parent::_resetState();
+    }
 }
diff --git a/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator/SuperProductsSku.php b/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator/SuperProductsSku.php
index 4ad763b9134a..190ec8ee43ca 100644
--- a/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator/SuperProductsSku.php
+++ b/vendor/magento/module-catalog-import-export/Model/Import/Product/Validator/SuperProductsSku.php
@@ -7,6 +7,7 @@
 
 use Magento\CatalogImportExport\Model\Import\Product\RowValidatorInterface;
 use Magento\CatalogImportExport\Model\Import\Product\SkuProcessor;
+use Magento\CatalogImportExport\Model\Import\Product\SkuStorage;
 
 class SuperProductsSku extends AbstractImportValidator implements RowValidatorInterface
 {
@@ -15,26 +16,35 @@ class SuperProductsSku extends AbstractImportValidator implements RowValidatorIn
      */
     protected $skuProcessor;
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * @param SkuProcessor $skuProcessor
+     * @param SkuStorage $skuStorage
      */
     public function __construct(
-        SkuProcessor $skuProcessor
+        SkuProcessor $skuProcessor,
+        SkuStorage $skuStorage
     ) {
         $this->skuProcessor = $skuProcessor;
+        $this->skuStorage = $skuStorage;
     }
 
     /**
-     * {@inheritdoc}
+     * Validates super product sku to exist in db or in the import
+     *
+     * @param array $value
+     * @return bool
      */
     public function isValid($value)
     {
         $this->_clearMessages();
-        $oldSku = $this->skuProcessor->getOldSkus();
         if (!empty($value['_super_products_sku'])) {
-            $superSku = strtolower($value['_super_products_sku']);
-            if (!isset($oldSku[$superSku])
-                && $this->skuProcessor->getNewSku($superSku) === null
+            if (!$this->skuStorage->has($value['_super_products_sku'])
+                && $this->skuProcessor->getNewSku($value['_super_products_sku']) === null
             ) {
                 $this->_addMessages([self::ERROR_SUPER_PRODUCTS_SKU_NOT_FOUND]);
                 return false;
diff --git a/vendor/magento/module-catalog-import-export/Model/ResourceModel/ProductDataLoader.php b/vendor/magento/module-catalog-import-export/Model/ResourceModel/ProductDataLoader.php
new file mode 100644
index 000000000000..d2c8ab302923
--- /dev/null
+++ b/vendor/magento/module-catalog-import-export/Model/ResourceModel/ProductDataLoader.php
@@ -0,0 +1,47 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+
+declare(strict_types=1);
+
+namespace Magento\CatalogImportExport\Model\ResourceModel;
+
+use Magento\Catalog\Model\ResourceModel\Product;
+
+class ProductDataLoader
+{
+    /**
+     * @var Product
+     */
+    private Product $productResource;
+
+    /**
+     * @param Product $productResource
+     */
+    public function __construct(Product $productResource)
+    {
+        $this->productResource = $productResource;
+    }
+
+    /**
+     * Get all products' columns from db
+     *
+     * @param array $columns
+     * @return \Generator
+     * @throws \Zend_Db_Statement_Exception
+     */
+    public function getProductsData(array $columns): \Generator
+    {
+        $resource = $this->productResource;
+        $connection = $resource->getConnection();
+        $select = $connection->select()->from($resource->getTable('catalog_product_entity'), $columns);
+
+        $stmt = $connection->query($select);
+
+        while ($row = $stmt->fetch(\PDO::FETCH_ASSOC)) {
+            yield $row;
+        }
+    }
+}
diff --git a/vendor/magento/module-catalog-import-export/Model/StockItemProcessor.php b/vendor/magento/module-catalog-import-export/Model/StockItemProcessor.php
new file mode 100644
index 000000000000..c1923b0d52ae
--- /dev/null
+++ b/vendor/magento/module-catalog-import-export/Model/StockItemProcessor.php
@@ -0,0 +1,33 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\CatalogImportExport\Model;
+
+class StockItemProcessor implements StockItemProcessorInterface
+{
+    /**
+     * @var StockItemImporterInterface
+     */
+    private $stockItemImporter;
+
+    /**
+     * @param StockItemImporterInterface $stockItemImporter
+     */
+    public function __construct(
+        StockItemImporterInterface $stockItemImporter
+    ) {
+        $this->stockItemImporter = $stockItemImporter;
+    }
+
+    /**
+     * @inheritdoc
+     */
+    public function process(array $stockData, array $importedData): void
+    {
+        $this->stockItemImporter->import($stockData);
+    }
+}
diff --git a/vendor/magento/module-catalog-import-export/Model/StockItemProcessorInterface.php b/vendor/magento/module-catalog-import-export/Model/StockItemProcessorInterface.php
new file mode 100644
index 000000000000..870bddde0116
--- /dev/null
+++ b/vendor/magento/module-catalog-import-export/Model/StockItemProcessorInterface.php
@@ -0,0 +1,27 @@
+<?php
+/**
+ * Copyright © Magento, Inc. All rights reserved.
+ * See COPYING.txt for license details.
+ */
+declare(strict_types=1);
+
+namespace Magento\CatalogImportExport\Model;
+
+use Magento\Framework\Exception\CouldNotSaveException;
+use Magento\Framework\Exception\InputException;
+use Magento\Framework\Validation\ValidationException;
+
+interface StockItemProcessorInterface
+{
+    /**
+     * Handle Import of Stock Item Data
+     *
+     * @param array $stockData
+     * @param array $importedData
+     * @return void
+     * @throws CouldNotSaveException
+     * @throws InputException
+     * @throws ValidationException
+     */
+    public function process(array $stockData, array $importedData): void;
+}
diff --git a/vendor/magento/module-catalog-import-export/etc/di.xml b/vendor/magento/module-catalog-import-export/etc/di.xml
index c35bcbd84951..43fdda6227ac 100644
--- a/vendor/magento/module-catalog-import-export/etc/di.xml
+++ b/vendor/magento/module-catalog-import-export/etc/di.xml
@@ -8,6 +8,7 @@
 <config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
     <preference for="Magento\CatalogImportExport\Model\Export\RowCustomizerInterface" type="Magento\CatalogImportExport\Model\Export\RowCustomizer\Composite" />
     <preference for="Magento\CatalogImportExport\Model\StockItemImporterInterface" type="Magento\CatalogImportExport\Model\StockItemImporter" />
+    <preference for="Magento\CatalogImportExport\Model\StockItemProcessorInterface" type="Magento\CatalogImportExport\Model\StockItemProcessor" />
     <preference for="Magento\CatalogImportExport\Model\Export\ProductFilterInterface" type="Magento\CatalogImportExport\Model\Export\ProductFilters" />
     <type name="Magento\ImportExport\Model\Import">
         <plugin name="catalogProductFlatIndexerImport" type="Magento\CatalogImportExport\Model\Indexer\Product\Flat\Plugin\Import" />
diff --git a/vendor/magento/module-catalog-url-rewrite/Observer/AfterImportDataObserver.php b/vendor/magento/module-catalog-url-rewrite/Observer/AfterImportDataObserver.php
index faec3bb40695..6dfc2b3dcd9d 100644
--- a/vendor/magento/module-catalog-url-rewrite/Observer/AfterImportDataObserver.php
+++ b/vendor/magento/module-catalog-url-rewrite/Observer/AfterImportDataObserver.php
@@ -13,6 +13,7 @@
 use Magento\Catalog\Model\ResourceModel\Category\Collection as CategoryCollection;
 use Magento\Catalog\Model\ResourceModel\Category\CollectionFactory as CategoryCollectionFactory;
 use Magento\CatalogImportExport\Model\Import\Product as ImportProduct;
+use Magento\CatalogImportExport\Model\Import\Product\SkuStorage;
 use Magento\CatalogUrlRewrite\Model\ObjectRegistry;
 use Magento\CatalogUrlRewrite\Model\ObjectRegistryFactory;
 use Magento\CatalogUrlRewrite\Model\ProductUrlPathGenerator;
@@ -174,6 +175,11 @@ class AfterImportDataObserver implements ObserverInterface
      */
     private $scopeConfig;
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * @param ProductFactory $catalogProductFactory
      * @param ObjectRegistryFactory $objectRegistryFactory
@@ -186,6 +192,7 @@ class AfterImportDataObserver implements ObserverInterface
      * @param MergeDataProviderFactory|null $mergeDataProviderFactory
      * @param CategoryCollectionFactory|null $categoryCollectionFactory
      * @param ScopeConfigInterface|null $scopeConfig
+     * @param SkuStorage|null $skuStorage
      * @throws RuntimeException
      * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
@@ -200,7 +207,8 @@ public function __construct(
         UrlFinderInterface $urlFinder,
         MergeDataProviderFactory $mergeDataProviderFactory = null,
         CategoryCollectionFactory $categoryCollectionFactory = null,
-        ScopeConfigInterface $scopeConfig = null
+        ScopeConfigInterface $scopeConfig = null,
+        SkuStorage $skuStorage = null
     ) {
         $this->urlPersist = $urlPersist;
         $this->catalogProductFactory = $catalogProductFactory;
@@ -219,6 +227,8 @@ public function __construct(
             ObjectManager::getInstance()->get(CategoryCollectionFactory::class);
         $this->scopeConfig = $scopeConfig ?:
             ObjectManager::getInstance()->get(ScopeConfigInterface::class);
+        $this->skuStorage = $skuStorage ?:
+            ObjectManager::getInstance()->get(SkuStorage::class);
     }
 
     /**
@@ -254,8 +264,7 @@ public function execute(Observer $observer)
     private function _populateForUrlGeneration($rowData)
     {
         $newSku = $this->import->getNewSku($rowData[ImportProduct::COL_SKU]);
-        $oldSku = $this->import->getOldSku();
-        if (!$this->isNeedToPopulateForUrlGeneration($rowData, $newSku, $oldSku)) {
+        if (!$this->isNeedToPopulateForUrlGeneration($rowData, $newSku)) {
             return null;
         }
         $rowData['entity_id'] = $newSku['entity_id'];
@@ -293,16 +302,15 @@ private function _populateForUrlGeneration($rowData)
      *
      * @param array $rowData
      * @param array $newSku
-     * @param array $oldSku
      * @return bool
      */
-    private function isNeedToPopulateForUrlGeneration($rowData, $newSku, $oldSku): bool
+    private function isNeedToPopulateForUrlGeneration($rowData, $newSku): bool
     {
         if ((
             (empty($newSku) || !isset($newSku['entity_id']))
                 || ($this->import->getRowScope($rowData) == ImportProduct::SCOPE_STORE
                     && empty($rowData[self::URL_KEY_ATTRIBUTE_CODE]))
-                || (array_key_exists(strtolower($rowData[ImportProduct::COL_SKU] ?? ''), $oldSku)
+                || ($this->skuStorage->has($rowData[ImportProduct::COL_SKU] ?? '')
                     && !isset($rowData[self::URL_KEY_ATTRIBUTE_CODE])
                     && $this->import->getBehavior() === ImportExport::BEHAVIOR_APPEND)
             )
diff --git a/vendor/magento/module-catalog-url-rewrite/Observer/ClearProductUrlsObserver.php b/vendor/magento/module-catalog-url-rewrite/Observer/ClearProductUrlsObserver.php
index f5bf41766623..00e4da2744a0 100644
--- a/vendor/magento/module-catalog-url-rewrite/Observer/ClearProductUrlsObserver.php
+++ b/vendor/magento/module-catalog-url-rewrite/Observer/ClearProductUrlsObserver.php
@@ -6,7 +6,7 @@
 namespace Magento\CatalogUrlRewrite\Observer;
 
 use Magento\CatalogImportExport\Model\Import\Product as ImportProduct;
-use Magento\Framework\App\ResourceConnection;
+use Magento\CatalogImportExport\Model\Import\Product\SkuStorage;
 use Magento\UrlRewrite\Model\UrlPersistInterface;
 use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
 use Magento\CatalogUrlRewrite\Model\ProductUrlRewriteGenerator;
@@ -15,17 +15,25 @@
 class ClearProductUrlsObserver implements ObserverInterface
 {
     /**
-     * @var \Magento\UrlRewrite\Model\UrlPersistInterface
+     * @var UrlPersistInterface
      */
     protected $urlPersist;
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * @param UrlPersistInterface $urlPersist
+     * @param SkuStorage $skuStorage
      */
     public function __construct(
-        UrlPersistInterface $urlPersist
+        UrlPersistInterface $urlPersist,
+        SkuStorage $skuStorage
     ) {
         $this->urlPersist = $urlPersist;
+        $this->skuStorage = $skuStorage;
     }
 
     /**
@@ -37,14 +45,15 @@ public function __construct(
     public function execute(\Magento\Framework\Event\Observer $observer)
     {
         if ($products = $observer->getEvent()->getBunch()) {
-            $oldSku = $observer->getEvent()->getAdapter()->getOldSku();
             $idToDelete = [];
             foreach ($products as $product) {
-                $sku = strtolower($product[ImportProduct::COL_SKU] ?? '');
-                if (!isset($oldSku[$sku])) {
+                $sku = $product[ImportProduct::COL_SKU] ?? '';
+                $sku = (string)$sku;
+                if (!$this->skuStorage->has($sku)) {
                     continue;
                 }
-                $productData = $oldSku[$sku];
+
+                $productData = $this->skuStorage->get($sku);
                 $idToDelete[] = $productData['entity_id'];
             }
             if (!empty($idToDelete)) {
diff --git a/vendor/magento/module-configurable-import-export/Model/Import/Product/Type/Configurable.php b/vendor/magento/module-configurable-import-export/Model/Import/Product/Type/Configurable.php
index 072b9788d9b7..a16946c20f29 100644
--- a/vendor/magento/module-configurable-import-export/Model/Import/Product/Type/Configurable.php
+++ b/vendor/magento/module-configurable-import-export/Model/Import/Product/Type/Configurable.php
@@ -8,6 +8,7 @@
 
 use Magento\Catalog\Api\Data\ProductInterface;
 use Magento\CatalogImportExport\Model\Import\Product as ImportProduct;
+use Magento\CatalogImportExport\Model\Import\Product\SkuStorage;
 use Magento\Framework\EntityManager\MetadataPool;
 use Magento\Framework\Exception\LocalizedException;
 
@@ -201,6 +202,11 @@ class Configurable extends \Magento\CatalogImportExport\Model\Import\Product\Typ
      */
     private $productEntityIdentifierField;
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * @param \Magento\Eav\Model\ResourceModel\Entity\Attribute\Set\CollectionFactory $attrSetColFac
      * @param \Magento\Catalog\Model\ResourceModel\Product\Attribute\CollectionFactory $prodAttrColFac
@@ -210,6 +216,7 @@ class Configurable extends \Magento\CatalogImportExport\Model\Import\Product\Typ
      * @param \Magento\ImportExport\Model\ResourceModel\Helper $resourceHelper
      * @param \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $_productColFac
      * @param MetadataPool $metadataPool
+     * @param SkuStorage $skuStorage
      */
     public function __construct(
         \Magento\Eav\Model\ResourceModel\Entity\Attribute\Set\CollectionFactory $attrSetColFac,
@@ -219,13 +226,16 @@ public function __construct(
         \Magento\Catalog\Model\ProductTypes\ConfigInterface $productTypesConfig,
         \Magento\ImportExport\Model\ResourceModel\Helper $resourceHelper,
         \Magento\Catalog\Model\ResourceModel\Product\CollectionFactory $_productColFac,
-        MetadataPool $metadataPool = null
+        MetadataPool $metadataPool = null,
+        SkuStorage $skuStorage = null
     ) {
         parent::__construct($attrSetColFac, $prodAttrColFac, $resource, $params, $metadataPool);
         $this->_productTypesConfig = $productTypesConfig;
         $this->_resourceHelper = $resourceHelper;
         $this->_productColFac = $_productColFac;
         $this->_connection = $this->_entityModel->getConnection();
+        $this->skuStorage = $skuStorage ?: \Magento\Framework\App\ObjectManager::getInstance()
+            ->get(SkuStorage::class);
     }
 
     /**
@@ -376,11 +386,10 @@ function ($element) use ($superAttrCode) {
      *
      * @param array $bunch - portion of products to process
      * @param array $newSku - imported variations list
-     * @param array $oldSku - present variations list
      * @return $this
      * @SuppressWarnings(PHPMD.CyclomaticComplexity)
      */
-    protected function _loadSkuSuperAttributeValues($bunch, $newSku, $oldSku)
+    protected function _loadSkuSuperAttributeValues($bunch, $newSku)
     {
         if ($this->_superAttributes) {
             $attrSetIdToName = $this->_entityModel->getAttrSetIdToName();
@@ -396,10 +405,11 @@ protected function _loadSkuSuperAttributeValues($bunch, $newSku, $oldSku)
 
                 foreach ($dataWithExtraVirtualRows as $data) {
                     if (!empty($data['_super_products_sku'])) {
-                        if (isset($newSku[$data['_super_products_sku']])) {
-                            $productIds[] = $newSku[$data['_super_products_sku']][$this->getProductEntityLinkField()];
-                        } elseif (isset($oldSku[$data['_super_products_sku']])) {
-                            $productIds[] = $oldSku[$data['_super_products_sku']][$this->getProductEntityLinkField()];
+                        $sku = $data['_super_products_sku'];
+                        if (isset($newSku[$sku])) {
+                            $productIds[] = $newSku[$sku][$this->getProductEntityLinkField()];
+                        } elseif ($this->skuStorage->has($sku)) {
+                            $productIds[] = $this->skuStorage->get($sku)[$this->getProductEntityLinkField()];
                         }
                     }
                 }
@@ -436,11 +446,10 @@ protected function _loadSkuSuperAttributeValues($bunch, $newSku, $oldSku)
     protected function _loadSkuSuperDataForBunch(array $bunch)
     {
         $newSku = $this->_entityModel->getNewSku();
-        $oldSku = $this->_entityModel->getOldSku();
         $productIds = [];
         foreach ($bunch as $rowData) {
             $sku = isset($rowData[ImportProduct::COL_SKU]) ? strtolower($rowData[ImportProduct::COL_SKU]) : '';
-            $productData = $newSku[$sku] ?? $oldSku[$sku];
+            $productData = $newSku[$sku] ?? $this->skuStorage->get($sku);
             $productIds[] = $productData[$this->getProductEntityLinkField()];
         }
 
@@ -767,14 +776,14 @@ protected function _collectSuperData($rowData)
     protected function _collectAssocIds($data)
     {
         $newSku = $this->_entityModel->getNewSku();
-        $oldSku = $this->_entityModel->getOldSku();
         if (!empty($data['_super_products_sku'])) {
             if (isset($newSku[$data['_super_products_sku']])) {
                 $superProductRowId = $newSku[$data['_super_products_sku']][$this->getProductEntityLinkField()];
                 $superProductEntityId = $newSku[$data['_super_products_sku']][$this->getProductEntityIdentifierField()];
-            } elseif (isset($oldSku[$data['_super_products_sku']])) {
-                $superProductRowId = $oldSku[$data['_super_products_sku']][$this->getProductEntityLinkField()];
-                $superProductEntityId = $oldSku[$data['_super_products_sku']][$this->getProductEntityIdentifierField()];
+            } elseif ($this->skuStorage->has($data['_super_products_sku'])) {
+                $oldSkuData = $this->skuStorage->get($data['_super_products_sku']);
+                $superProductRowId = $oldSkuData[$this->getProductEntityLinkField()];
+                $superProductEntityId = $oldSkuData[$this->getProductEntityIdentifierField()];
             }
             if (isset($superProductRowId)) {
                 if (isset($data['display']) && $data['display'] == 0) {
@@ -826,7 +835,6 @@ protected function _collectSuperDataLabels($data, $productSuperAttrId, $productI
     public function saveData()
     {
         $newSku = $this->_entityModel->getNewSku();
-        $oldSku = $this->_entityModel->getOldSku();
         $this->_productSuperData = [];
         $this->_productData = null;
 
@@ -847,7 +855,7 @@ public function saveData()
 
             $this->_simpleIdsToDelete = [];
 
-            $this->_loadSkuSuperAttributeValues($bunch, $newSku, $oldSku);
+            $this->_loadSkuSuperAttributeValues($bunch, $newSku);
 
             foreach ($bunch as $rowNum => $rowData) {
                 if (!$this->_entityModel->isRowAllowedToImport($rowData, $rowNum)) {
@@ -858,7 +866,7 @@ public function saveData()
                 if (ImportProduct::SCOPE_DEFAULT == $scope &&
                     !empty($rowData[ImportProduct::COL_SKU])) {
                     $sku = strtolower($rowData[ImportProduct::COL_SKU]);
-                    $this->_productData = $newSku[$sku] ?? $oldSku[$sku];
+                    $this->_productData = $newSku[$sku] ?? $this->skuStorage->get($sku);
 
                     if ($this->_type != $this->_productData['type_id']) {
                         $this->_productData = null;
diff --git a/vendor/magento/module-grouped-import-export/Model/Import/Product/Type/Grouped.php b/vendor/magento/module-grouped-import-export/Model/Import/Product/Type/Grouped.php
index 4907126b941f..98e617f46c0a 100644
--- a/vendor/magento/module-grouped-import-export/Model/Import/Product/Type/Grouped.php
+++ b/vendor/magento/module-grouped-import-export/Model/Import/Product/Type/Grouped.php
@@ -7,6 +7,7 @@
 
 use Magento\Catalog\Model\ProductTypes\ConfigInterface;
 use Magento\CatalogImportExport\Model\Import\Product;
+use Magento\CatalogImportExport\Model\Import\Product\SkuStorage;
 use Magento\Framework\App\ObjectManager;
 use Magento\ImportExport\Model\Import;
 
@@ -47,6 +48,11 @@ class Grouped extends \Magento\CatalogImportExport\Model\Import\Product\Type\Abs
      */
     private $productEntityIdentifierField;
 
+    /**
+     * @var SkuStorage
+     */
+    private SkuStorage $skuStorage;
+
     /**
      * @param \Magento\Eav\Model\ResourceModel\Entity\Attribute\Set\CollectionFactory $attrSetColFac
      * @param \Magento\Catalog\Model\ResourceModel\Product\Attribute\CollectionFactory $prodAttrColFac
@@ -54,6 +60,7 @@ class Grouped extends \Magento\CatalogImportExport\Model\Import\Product\Type\Abs
      * @param array $params
      * @param Grouped\Links $links
      * @param ConfigInterface|null $config
+     * @param SkuStorage|null $skuStorage
      */
     public function __construct(
         \Magento\Eav\Model\ResourceModel\Entity\Attribute\Set\CollectionFactory $attrSetColFac,
@@ -61,12 +68,15 @@ public function __construct(
         \Magento\Framework\App\ResourceConnection $resource,
         array $params,
         Grouped\Links $links,
-        ConfigInterface $config = null
+        ConfigInterface $config = null,
+        SkuStorage $skuStorage = null
     ) {
         $this->links = $links;
         $this->config = $config ?: ObjectManager::getInstance()->get(ConfigInterface::class);
         $this->allowedProductTypes = $this->config->getComposableTypes();
         parent::__construct($attrSetColFac, $prodAttrColFac, $resource, $params);
+        $this->skuStorage = $skuStorage ?: ObjectManager::getInstance()
+            ->get(SkuStorage::class);
     }
 
     /**
@@ -80,7 +90,6 @@ public function __construct(
     public function saveData()
     {
         $newSku = $this->_entityModel->getNewSku();
-        $oldSku = $this->_entityModel->getOldSku();
         $attributes = $this->links->getAttributes();
         $productData = [];
         while ($bunch = $this->_entityModel->getNextBunch()) {
@@ -109,10 +118,11 @@ public function saveData()
                         in_array($newSku[$associatedSku]['type_id'], $this->allowedProductTypes)
                     ) {
                         $linkedProductId = $newSku[$associatedSku][$this->getProductEntityIdentifierField()];
-                    } elseif (isset($oldSku[$associatedSku]) &&
-                        in_array($oldSku[$associatedSku]['type_id'], $this->allowedProductTypes)
+                    } elseif ($associatedSku && $this->skuStorage->has($associatedSku) &&
+                        in_array($this->skuStorage->get($associatedSku)['type_id'], $this->allowedProductTypes)
                     ) {
-                        $linkedProductId = $oldSku[$associatedSku][$this->getProductEntityIdentifierField()];
+                        $oldProductData = $this->skuStorage->get($associatedSku);
+                        $linkedProductId = $oldProductData[$this->getProductEntityIdentifierField()];
                     } else {
                         continue;
                     }
