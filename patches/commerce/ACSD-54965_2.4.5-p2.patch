diff --git a/vendor/magento/module-visual-merchandiser/Block/Adminhtml/Category/Merchandiser.php b/vendor/magento/module-visual-merchandiser/Block/Adminhtml/Category/Merchandiser.php
index f652ba28a6d7..1d34f5aedc15 100644
--- a/vendor/magento/module-visual-merchandiser/Block/Adminhtml/Category/Merchandiser.php
+++ b/vendor/magento/module-visual-merchandiser/Block/Adminhtml/Category/Merchandiser.php
@@ -5,34 +5,40 @@
  */
 namespace Magento\VisualMerchandiser\Block\Adminhtml\Category;
 
+use Magento\Backend\Block\Template;
+use Magento\Backend\Block\Widget\Context;
+use Magento\Framework\Exception\NoSuchEntityException;
+use Magento\Framework\Registry;
+use Magento\VisualMerchandiser\Model\Position\Cache;
+
 /**
  * @api
  * @since 100.1.0
  */
-class Merchandiser extends \Magento\Backend\Block\Template
+class Merchandiser extends Template
 {
     /**
-     * @var \Magento\Framework\Registry
+     * @var Registry
      * @since 100.1.0
      */
     protected $_coreRegistry;
 
     /**
-     * @var \Magento\VisualMerchandiser\Model\Position\Cache
+     * @var Cache
      * @since 100.1.0
      */
     protected $_positionCache;
 
     /**
-     * @param \Magento\Backend\Block\Widget\Context $context
-     * @param \Magento\Framework\Registry $registry
-     * @param \Magento\VisualMerchandiser\Model\Position\Cache $cache
+     * @param Context $context
+     * @param Registry $registry
+     * @param Cache $cache
      * @param array $data
      */
     public function __construct(
-        \Magento\Backend\Block\Widget\Context $context,
-        \Magento\Framework\Registry $registry,
-        \Magento\VisualMerchandiser\Model\Position\Cache $cache,
+        Context $context,
+        Registry $registry,
+        Cache $cache,
         array $data = []
     ) {
         $this->_coreRegistry = $registry;
@@ -41,7 +47,10 @@ public function __construct(
     }
 
     /**
+     * Get dialog URL
+     *
      * @return string
+     * @throws NoSuchEntityException
      * @since 100.1.0
      */
     public function getDialogUrl()
@@ -50,12 +59,16 @@ public function getDialogUrl()
             'merchandiser/*/addproduct',
             [
                 'cache_key' => $this->getPositionCacheKey(),
-                'componentJson' => true
+                'componentJson' => true,
+                'category_id' => $this->getCategoryId(),
+                'store_id' => $this->getStoreId()
             ]
         );
     }
 
     /**
+     * Get save positions URL
+     *
      * @return string
      * @since 100.1.0
      */
@@ -65,7 +78,7 @@ public function getSavePositionsUrl()
     }
 
     /**
-     * Get products positions url
+     * Get products positions URL
      *
      * @return string
      * @since 100.1.0
@@ -76,6 +89,8 @@ public function getProductsPositionsUrl()
     }
 
     /**
+     * Get category id
+     *
      * @return mixed
      * @since 100.1.0
      */
@@ -85,6 +100,19 @@ public function getCategoryId()
     }
 
     /**
+     * Retrieve current store id
+     *
+     * @return int
+     * @throws NoSuchEntityException
+     */
+    private function getStoreId(): int
+    {
+        return $this->_storeManager->getStore()->getId();
+    }
+
+    /**
+     * Get position cache key
+     *
      * @return string
      * @since 100.1.0
      */
@@ -94,20 +122,24 @@ public function getPositionCacheKey()
     }
 
     /**
+     * Get position cache key name
+     *
      * @return string
      * @since 100.1.0
      */
     public function getPositionCacheKeyName()
     {
-        return \Magento\VisualMerchandiser\Model\Position\Cache::POSITION_CACHE_KEY;
+        return Cache::POSITION_CACHE_KEY;
     }
 
     /**
+     * Get position data JSON
+     *
      * @return string
      * @since 100.1.0
      */
     public function getPositionDataJson()
     {
-        return \Zend_Json::encode($this->_positionCache->getPositions($this->getPositionCacheKey()));
+        return json_encode($this->_positionCache->getPositions($this->getPositionCacheKey()));
     }
 }
diff --git a/vendor/magento/module-visual-merchandiser/Model/Category/Products.php b/vendor/magento/module-visual-merchandiser/Model/Category/Products.php
index b64f5eb479ca..cdbb20983040 100644
--- a/vendor/magento/module-visual-merchandiser/Model/Category/Products.php
+++ b/vendor/magento/module-visual-merchandiser/Model/Category/Products.php
@@ -145,6 +145,9 @@ public function getCollectionForGrid($categoryId, $store = null, $productPositio
                     'small_image'
                 ]
             );
+        if ($store !== null) {
+            $collection->setStoreId((int)$store);
+        }
 
         $collection = $this->quantityStockResolver->joinStock($collection);
 
diff --git a/vendor/magento/module-visual-merchandiser/Model/Product/DataProvider.php b/vendor/magento/module-visual-merchandiser/Model/Product/DataProvider.php
index 711d5a5409cc..16e7b2cfc329 100755
--- a/vendor/magento/module-visual-merchandiser/Model/Product/DataProvider.php
+++ b/vendor/magento/module-visual-merchandiser/Model/Product/DataProvider.php
@@ -5,13 +5,15 @@
  */
 namespace Magento\VisualMerchandiser\Model\Product;
 
+use Magento\Catalog\Model\Category\Product\PositionResolver;
 use Magento\Catalog\Model\ResourceModel\Product\CollectionFactory;
 use Magento\Framework\Api\Filter;
+use Magento\Framework\App\ObjectManager;
 use Magento\Framework\App\RequestInterface;
 use Magento\Framework\Exception\LocalizedException;
-use Magento\Store\Model\Store;
 use Magento\Ui\DataProvider\AbstractDataProvider;
 use Magento\VisualMerchandiser\Model\Position\Cache;
+use Magento\VisualMerchandiser\Model\Resolver\QuantityAndStock;
 
 /**
  * Class DataProvider for the Visual Merchandiser product selection grid
@@ -38,6 +40,16 @@ class DataProvider extends AbstractDataProvider
      */
     private $request;
 
+    /**
+     * @var PositionResolver
+     */
+    private $positionResolver;
+
+    /**
+     * @var QuantityAndStock|mixed
+     */
+    private QuantityAndStock $quantityAndStock;
+
     /**
      * @param string $name
      * @param string $primaryFieldName
@@ -47,7 +59,10 @@ class DataProvider extends AbstractDataProvider
      * @param Cache $cache
      * @param array $meta
      * @param array $data
+     * @param PositionResolver|null $positionResolver
+     * @param QuantityAndStock|null $quantityAndStock
      * @throws LocalizedException
+     * @SuppressWarnings(PHPMD.ExcessiveParameterList)
      */
     public function __construct(
         $name,
@@ -57,12 +72,16 @@ public function __construct(
         RequestInterface $request,
         Cache $cache,
         array $meta = [],
-        array $data = []
+        array $data = [],
+        ?PositionResolver $positionResolver = null,
+        ?QuantityAndStock $quantityAndStock = null
     ) {
         parent::__construct($name, $primaryFieldName, $requestFieldName, $meta, $data);
 
         $this->request = $request;
         $this->cache = $cache;
+        $this->positionResolver = $positionResolver ?: ObjectManager::getInstance()->get(PositionResolver::class);
+        $this->quantityAndStock = $quantityAndStock ?: ObjectManager::getInstance()->get(QuantityAndStock::class);
 
         $this->collection = $collectionFactory->create()->addAttributeToSelect(
             'sku'
@@ -76,14 +95,9 @@ public function __construct(
             'price'
         );
 
-        $this->collection->joinField(
-            'qty',
-            'cataloginventory_stock_item',
-            'qty',
-            'product_id=entity_id',
-            '{{table}}.stock_id=1',
-            'left'
-        );
+        $this->collection->setStoreId($this->request->getParam('store_id', "0"));
+        $this->collection = $this->quantityAndStock->joinStock($this->collection);
+        $this->collection->getSelect()->group('e.entity_id');
 
         $this->prepareUpdateUrl();
     }
@@ -126,12 +140,16 @@ protected function prepareUpdateUrl()
             if ('*' == $paramValue) {
                 $paramValue = $this->request->getParam($paramName);
                 $this->positionCacheKey = $paramValue;
+            } elseif ('%category_id%' === $paramValue) {
+                $paramValue = $this->request->getParam($paramName);
+            } elseif ('%store_id%' === $paramValue) {
+                $paramValue = $this->request->getParam($paramName, "0");
             }
 
             if ($paramValue) {
                 $this->data['config']['update_url'] = sprintf(
-                    '%s%s/%s',
-                    $this->data['config']['update_url'],
+                    '%s/%s/%s',
+                    rtrim($this->data['config']['update_url'], '/'),
                     $paramName,
                     $paramValue
                 );
@@ -148,13 +166,16 @@ protected function prepareUpdateUrl()
     public function addPositionData()
     {
         $positions = $this->cache->getPositions($this->positionCacheKey);
+        $categoryId = $this->request->getParam('category_id');
 
-        if ($positions === false) {
+        if ($positions === false && $categoryId !== null) {
+            $positions = $this->positionResolver->getPositions((int) $categoryId);
+        } elseif ($positions === false && $categoryId === null) {
             return;
         }
 
         foreach ($this->collection as $item) {
-            if (array_key_exists($item->getEntityId(), $positions)) {
+            if (is_array($positions) && array_key_exists($item->getEntityId(), $positions)) {
                 $item->setPosition(
                     $positions[$item->getEntityId()]
                 );
@@ -176,17 +197,25 @@ public function addPositionData()
      */
     public function getData()
     {
-        $this->collection->setStoreId(Store::DEFAULT_STORE_ID);
         $this->collection->getLimitationFilters()->setUsePriceIndex(false);
         $this->addPositionData();
+        $positions = $this->cache->getPositions($this->positionCacheKey);
+        $categoryId = $this->request->getParam('category_id');
         $arrItems = [];
-        $arrItems['totalRecords'] = $this->collection->getSize();
+        $arrItems['totalRecords'] = count($this->collection->getItems());
         $arrItems['items'] = [];
-        $arrItems['selectedData'] = $this->cache->getPositions($this->positionCacheKey);
-        $arrItems['allIds'] = $this->collection->getAllIds();
+        $arrItems['allIds'] = [];
+        if ($positions === false && $categoryId !== null) {
+            $arrItems['selectedData'] = $this->positionResolver->getPositions((int) $categoryId);
+        } else {
+            $arrItems['selectedData'] = $positions;
+        }
 
         foreach ($this->collection->getItems() as $item) {
-            $arrItems['items'][] =  $item->toArray();
+            $itemDetails = $item->toArray();
+            $itemDetails['qty'] = $itemDetails['stock'] ?? 0;
+            $arrItems['items'][] = $itemDetails;
+            $arrItems['allIds'][] = $item->getId();
         }
 
         return $arrItems;
diff --git a/vendor/magento/module-visual-merchandiser/view/adminhtml/ui_component/merchandiser_product_listing.xml b/vendor/magento/module-visual-merchandiser/view/adminhtml/ui_component/merchandiser_product_listing.xml
index c3ca2b6fd3cd..d3c3b9c5147c 100755
--- a/vendor/magento/module-visual-merchandiser/view/adminhtml/ui_component/merchandiser_product_listing.xml
+++ b/vendor/magento/module-visual-merchandiser/view/adminhtml/ui_component/merchandiser_product_listing.xml
@@ -22,6 +22,8 @@
         <settings>
             <filterUrlParams>
                 <param name="cache_key">*</param>
+                <param name="category_id">%category_id%</param>
+                <param name="store_id">%store_id%</param>
             </filterUrlParams>
             <updateUrl path="mui/index/render"/>
         </settings>
